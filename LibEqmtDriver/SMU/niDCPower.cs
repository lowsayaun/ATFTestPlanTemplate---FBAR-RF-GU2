//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Measurement Studio for nidcpower 1.7.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NationalInstruments.ModularInstruments.Interop
{
    using System;
    using System.Runtime.InteropServices;


    public class nidcpower : object, System.IDisposable
    {

        private System.Runtime.InteropServices.HandleRef _handle;

        private bool _disposed = true;

        ~nidcpower() { Dispose(false); }


        /// <summary>
        /// This function creates an IVI instrument driver session, typically using the C session instrument handle.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The instrument handle that is used to create an IVI instrument driver session.
        /// </param>
        public nidcpower(System.IntPtr Instrument_Handle)
        {
            this._handle = new System.Runtime.InteropServices.HandleRef(this, Instrument_Handle);
            this._disposed = false;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_InitializeWithChannels
        /// 
        ///  ViStatus niDCPower_InitializeWithChannels(ViRsrc resourceName,
        ///       ViConstString channels,
        ///       ViBoolean reset,
        ///       ViConstString optionString,
        ///       ViSession *vi);
        /// 
        ///  Purpose
        /// 
        /// Creates and returns a new NI-DCPower session to the power supply or SMU specified in resource name to be used in all subsequent NI-DCPower function calls. With this function, you can optionally set the initial state of the following session attributes:  
        ///  NIDCPOWER_ATTR_SIMULATE
        ///   NIDCPOWER_ATTR_DRIVER_SETUP
        /// 
        /// After calling this function, the session will be in the Uncommitted state. Refer to the Programming States topic for details about specific software states.
        /// 
        /// To place the device in a known start-up state when creating a new session, set reset to VI_TRUE. This action is equivalent to using the niDCPower_reset function immediately after initializing the session.
        /// 
        /// To open a session and leave the device in its existing configuration without passing through a transitional output state, set reset to VI_FALSE. Then configure the device as in the previous session, changing only the desired settings, and then call the niDCPower_Initiate function.
        /// 
        /// 
        /// </summary>
        /// <param name="Resource_Name">
        /// 
        ///  resourceName
        /// ViRsrc
        /// Specifies the resourceName assigned by Measurement &#38; Automation Explorer (MAX), for example &#34;PXI1Slot3&#34; where &#34;PXI1Slot3&#34; is an instrument's resourceName. resourceName can also be a logical IVI name.
        /// 
        /// </param>
        /// <param name="Channels">
        /// 
        /// 
        /// channelName
        /// ViConstString
        /// Specifies to which output channel(s) to apply this configuration value. Specify multiple channels by using a channel list or a channel range. A channel list is a comma (,) separated sequence of channel names (for example, 0,2 specifies channels 0 and 2). A channel range is a lower bound channel followed by a hyphen (-) or colon (:) followed by an upper bound channel (for example, 0-2 specifies channels 0, 1, and 2). In the Running state, multiple output channel configurations are performed sequentially based on the order specified in this parameter. If there is only one channel in the session, you do not need to specify the channel name.
        ///  
        /// 
        /// </param>
        /// <param name="Reset">
        /// 
        ///  reset
        /// ViBoolean
        /// Specifies whether to reset the device during the initialization procedure.
        /// 
        /// </param>
        /// <param name="Option_String">
        /// 
        ///  optionString
        /// ViString
        /// Specifies the initial value of certain attributes for the session. The syntax for optionString is a list of attributes with an assigned value where 1 is VI_TRUE and 0 is VI_FALSE. For example: 
        /// &#34;Simulate=0&#34;You do not have to specify a value for all the attributes. If you do not specify a value for an attribute, the default value is used. 
        /// 
        /// For more information about simulating a device, refer to  Simulating a Power Supply or SMU. 
        /// 
        /// </param>
        public nidcpower(string Resource_Name, string Channels, bool Reset, string Option_String)
        {
            System.IntPtr instrumentHandle;
            int pInvokeResult = PInvoke.InitializeWithChannels(Resource_Name, Channels, System.Convert.ToUInt16(Reset), Option_String, out instrumentHandle);
            this._handle = new System.Runtime.InteropServices.HandleRef(this, instrumentHandle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            this._disposed = false;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_InitExtCal
        /// 
        /// 
        ///  ViStatus niDCPower_InitExtCal(ViRsrc resourceName,
        ///       ViConstString password,
        ///       ViSession *vi);
        ///  Purpose
        /// If password is valid, this function creates a new IVI instrument driver
        ///       session to the device specified in resourceName and returns an
        ///       instrument handle you use to identify the device in all subsequent
        ///       NI-DCPower function calls. This function also sends initialization
        ///       commands to set the device to the state necessary for the operation
        ///       of NI-DCPower.
        ///       
        ///       Opening a calibration session always performs a reset. Refer to the calibration procedure for the device 
        ///   you are calibrating for detailed instructions on the appropriate use of this function. This function uses the deprecated programming state model.
        /// 
        /// </summary>
        /// <param name="Resource_Name">
        /// 
        ///  resourceName
        /// ViRsrc
        /// Specifies the resourceName assigned by Measurement &#38; Automation
        ///           Explorer (MAX), for example &#34;PXI1Slot3&#34; where &#34;PXI1Slot3&#34; is an
        ///           instrument's resourceName. resourceName can also be a logical IVI
        ///           name.     
        /// 
        /// </param>
        /// <param name="Password">
        /// 
        ///  password
        /// ViConstString
        /// Specifies the password for opening a calibration session. The initial password is factory configured to &quot;NI&quot;.  password can be a maximum of four alphanumeric characters.
        /// 
        /// </param>
        public nidcpower(string Resource_Name, string Password)
        {
            System.IntPtr instrumentHandle;
            int pInvokeResult = PInvoke.InitExtCal(Resource_Name, Password, out instrumentHandle);
            this._handle = new System.Runtime.InteropServices.HandleRef(this, instrumentHandle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            this._disposed = false;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_init (Obsolete)
        /// 
        ///  ViStatus niDCPower_init(ViRsrc resourceName,
        ///       ViBoolean IDQuery,
        ///       ViBoolean resetDevice,
        ///       ViSession *vi);
        ///  Purpose
        /// 
        /// This function is deprecated. Use niDCPower_InitializeWithChannels instead.
        /// 
        /// Creates a new IVI instrument driver session to the device specified
        ///       in resourceName and returns a session handle you use to identify the
        ///       device in all subsequent NI-DCPower function calls. This function
        ///       also sends initialization commands to set the device to the state
        ///       necessary for the operation of NI-DCPower. 
        /// 	  
        /// To place the device in a known start-up state when creating a new session, set resetDevice to VI_TRUE. This action is equivalent to using the niDCPower_reset function.
        /// 
        /// To open a session and leave the device in its existing configuration without passing through a transitional output state, set resetDevice to VI_FALSE, and immediately call the niDCPower_Abort function. Then configure the device as in the previous session, changing only the desired settings, and then call the niDCPower_Initiate function. Refer to the deprecated programming state model for information about the specific software states.
        /// 
        /// 
        /// 
        /// 
        /// </summary>
        /// <param name="Resource_Name">
        /// 
        /// 
        ///  resourceName
        /// ViRsrc
        /// Specifies the resourceName assigned by Measurement &#38; Automation
        ///           Explorer (MAX), for example &#34;PXI1Slot3&#34; where &#34;PXI1Slot3&#34; is an
        ///           instrument's resourceName. resourceName can also be a logical IVI
        ///           name.
        /// 
        /// </param>
        /// <param name="ID_Query">
        /// 
        ///  IDQuery
        /// ViBoolean
        /// Specifies whether the device is queried to determine if the device is a valid instrument for NI-DCPower.
        /// 
        /// 
        /// 
        /// Defined Values:
        /// 
        /// 
        /// VI_TRUE (1) Perform ID query.VI_FALSE (0)Do not perform ID query.
        /// 
        /// 
        /// </param>
        /// <param name="Reset_Device">
        ///  
        ///  resetDevice
        /// ViBoolean
        /// Specifies whether to reset the device during the initialization procedure.
        /// 
        /// 
        /// 
        /// Defined Values:
        /// 
        /// 
        /// VI_TRUE (1) Reset the device.VI_FALSE (0)Do not reset the device.
        /// 
        /// 
        /// </param>
        public nidcpower(string Resource_Name, bool ID_Query, bool Reset_Device)
        {
            System.IntPtr instrumentHandle;
            int pInvokeResult = PInvoke.init(Resource_Name, System.Convert.ToUInt16(ID_Query), System.Convert.ToUInt16(Reset_Device), out instrumentHandle);
            this._handle = new System.Runtime.InteropServices.HandleRef(this, instrumentHandle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            this._disposed = false;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_InitWithOptions (Obsolete)
        /// 
        ///  ViStatus niDCPower_InitWithOptions(ViRsrc resourceName,
        ///       ViBoolean IDQuery,
        ///       ViBoolean resetDevice,
        ///       ViString optionString,
        ///       ViSession *vi);
        ///  Purpose
        /// This function is deprecated. Use niDCPower_InitializeWithChannels instead.
        /// 
        /// Creates a new IVI instrument driver session to the device specified in resourceName and returns a session handle you use to identify the device in all subsequent NI-DCPower function calls. With this function, you can optionally set the initial state of the following session attributes: 
        ///  NIDCPOWER_ATTR_SIMULATE
        ///   NIDCPOWER_ATTR_DRIVER_SETUP
        ///   NIDCPOWER_ATTR_RANGE_CHECK
        ///   NIDCPOWER_ATTR_QUERY_INSTRUMENT_STATUS
        ///  NIDCPOWER_ATTR_CACHE
        ///   NIDCPOWER_ATTR_RECORD_COERCIONS
        /// 
        /// 
        /// This function also sends initialization commands to set the device to the state necessary for NI-DCPower to operate.
        /// 
        /// To place the device in a known start-up state when creating a new session, set resetDevice to VI_TRUE. This action is equivalent to using the niDCPower_reset function.
        /// 
        /// To open a session and leave the device in its existing configuration without passing through a transitional output state, set resetDevice to VI_FALSE, and immediately call the niDCPower_Abort function. Then configure the device as in the previous session changing only the desired settings, and then call the niDCPower_Initiate function.
        /// 
        /// Refer to the deprecated programming state model for information about the specific software states.
        /// 
        /// 
        /// 
        /// </summary>
        /// <param name="Resource_Name">
        /// 
        ///  resourceName
        /// ViRsrc
        /// Specifies the resourceName assigned by Measurement &#38; Automation Explorer (MAX), for example &#34;PXI1Slot3&#34; where &#34;PXI1Slot3&#34; is an instrument's resourceName. resourceName can also be a logical IVI name.
        /// 
        /// </param>
        /// <param name="ID_Query">
        /// 
        ///  IDQuery
        /// ViBoolean
        /// Specifies whether the device is queried to determine if the device is a valid instrument for NI-DCPower. 
        /// 
        /// </param>
        /// <param name="Reset_Device">
        /// 
        ///  resetDevice
        /// ViBoolean
        /// Specifies whether to reset the device during the initialization procedure.
        /// 
        /// </param>
        /// <param name="Option_String">
        /// 
        ///  optionString
        /// ViString
        /// Specifies the initial value of certain attributes for the session. The syntax for optionString is a list of attributes with an assigned value where 1 is VI_TRUE and 0 is VI_FALSE. Each attribute/value combination is delimited with a comma, as shown in the following example: 
        /// &#34;Simulate=0,RangeCheck=1,QueryInstrStatus=0,Cache=1&#34;If you do not wire this input or pass an empty string, the session assigns the default values, shown in the example, for these attributes. You do not have to specify a value for all the attributes. If you do not specify a value for an attribute, the default value is used. 
        /// 
        /// For more information about simulating a device, refer to  Simulating a Power Supply or SMU. 
        /// 
        /// </param>
        public nidcpower(string Resource_Name, bool ID_Query, bool Reset_Device, string Option_String)
        {
            System.IntPtr instrumentHandle;
            int pInvokeResult = PInvoke.InitWithOptions(Resource_Name, System.Convert.ToUInt16(ID_Query), System.Convert.ToUInt16(Reset_Device), Option_String, out instrumentHandle);
            this._handle = new System.Runtime.InteropServices.HandleRef(this, instrumentHandle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            this._disposed = false;
        }

        /// <summary>
        /// Gets the instrument handle.
        /// </summary>
        /// <value>
        /// The value is the IntPtr that represents the handle to the instrument.
        /// </value>
        public System.IntPtr Handle
        {
            get
            {
                return this._handle.Handle;
            }
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_ConfigureVoltageLevel
        /// 
        /// 
        ///  ViStatus niDCPower_ConfigureVoltageLevel(ViSession vi,
        ///                                                 ViConstString channelName,
        ///                                                 ViReal64 level);
        ///  Purpose
        /// Configures the voltage level the device attempts to generate for the specified channel(s). The channel must be enabled for the specified voltage level to take effect.  Refer to the niDCPower_ConfigureOutputEnabled function for more information about enabling the output channel. 
        /// 
        /// 
        /// The voltage level setting is applicable only if the output function of the channel is set to NIDCPOWER_VAL_DC_VOLTAGE. Use niDCPower_ConfigureOutputFunction to set the output function.
        /// 
        /// The device actively regulates the voltage at the specified level unless doing so causes a current output greater than the current limit across the channels' output terminals.
        /// 
        /// </summary>
        /// <param name="Channel_Name">
        /// 
        /// 
        /// channelName
        /// ViConstString
        /// Specifies to which output channel(s) to apply this configuration value. Specify multiple channels by using a channel list or a channel range. A channel list is a comma (,) separated sequence of channel names (for example, 0,2 specifies channels 0 and 2). A channel range is a lower bound channel followed by a hyphen (-) or colon (:) followed by an upper bound channel (for example, 0-2 specifies channels 0, 1, and 2). In the Running state, multiple output channel configurations are performed sequentially based on the order specified in this parameter. If there is only one channel in the session, you do not need to specify the channel name.
        ///  
        /// </param>
        /// <param name="Level">
        /// 
        ///  level
        /// ViReal64
        ///  Specifies the voltage level, in volts, for the output channel generation. 
        /// 
        /// 
        /// 
        /// 
        /// Valid Values:
        /// 
        /// The valid values for this parameter are defined by the voltage level range that is selected using the niDCPower_ConfigureVoltageLevelRange function.
        /// 
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int ConfigureVoltageLevel(string Channel_Name, double Level)
        {
            int pInvokeResult = PInvoke.ConfigureVoltageLevel(this._handle, Channel_Name, Level);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_ConfigureVoltageLevelRange
        /// 
        /// 
        ///  ViStatus niDCPower_ConfigureVoltageLevelRange(ViSession vi,
        ///                                                 ViConstString channelName,
        ///                                                 ViReal64 range);
        ///  Purpose
        /// Configures the voltage level range for the specified channel(s).  The configured range defines the valid values the voltage level can be set to using the niDCPower_ConfigureVoltageLevel function.  
        /// 
        /// The voltage level range setting is applicable only if the output function of the channel is set to NIDCPOWER_VAL_DC_VOLTAGE. Use niDCPower_ConfigureOutputFunction to set the output function.
        /// 
        /// Use the NIDCPOWER_ATTR_VOLTAGE_LEVEL_AUTORANGE attribute to enable automatic selection of the voltage level range. 
        /// 
        /// </summary>
        /// <param name="Channel_Name">
        /// 
        /// 
        /// channelName
        /// ViConstString
        /// Specifies to which output channel(s) to apply this configuration value. Specify multiple channels by using a channel list or a channel range. A channel list is a comma (,) separated sequence of channel names (for example, 0,2 specifies channels 0 and 2). A channel range is a lower bound channel followed by a hyphen (-) or colon (:) followed by an upper bound channel (for example, 0-2 specifies channels 0, 1, and 2). In the Running state, multiple output channel configurations are performed sequentially based on the order specified in this parameter. If there is only one channel in the session, you do not need to specify the channel name.
        ///  
        /// </param>
        /// <param name="Range">
        /// 
        /// 
        ///  range
        /// ViReal64
        /// Specifies the voltage level range, in volts, on the specified channel(s).
        /// 
        /// 
        /// 
        /// 
        /// 
        /// For valid ranges, refer to the Ranges topic for your device in the NI DC Power Supplies and SMUs Help.
        /// 
        /// 
        /// 
        /// 
        /// 
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int ConfigureVoltageLevelRange(string Channel_Name, double Range)
        {
            int pInvokeResult = PInvoke.ConfigureVoltageLevelRange(this._handle, Channel_Name, Range);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_ConfigureCurrentLimit
        /// 
        /// 
        ///  ViStatus niDCPower_ConfigureCurrentLimit(ViSession vi,
        ///                                                 ViConstString channelName,
        ///                                                 ViInt32 behavior,
        ///                                                 ViReal64 limit);
        ///  Purpose
        /// Configures the current limit for the specified channel(s).
        ///       The channel must be enabled for the specified current limit to take effect. Refer to
        ///       the niDCPower_ConfigureOutputEnabled function for more information about enabling the output channel.
        /// 
        /// 
        /// 
        /// The current limit is the current that the output should not exceed when generating the desired voltage level.  The current limit setting is applicable only if the output function of the channel is set to NIDCPOWER_VAL_DC_VOLTAGE. Use niDCPower_ConfigureOutputFunction to set the output function.
        /// 
        /// </summary>
        /// <param name="Channel_Name">
        /// 
        /// 
        /// channelName
        /// ViConstString
        /// Specifies to which output channel(s) to apply this configuration value. Specify multiple channels by using a channel list or a channel range. A channel list is a comma (,) separated sequence of channel names (for example, 0,2 specifies channels 0 and 2). A channel range is a lower bound channel followed by a hyphen (-) or colon (:) followed by an upper bound channel (for example, 0-2 specifies channels 0, 1, and 2). In the Running state, multiple output channel configurations are performed sequentially based on the order specified in this parameter. If there is only one channel in the session, you do not need to specify the channel name.
        ///  
        /// </param>
        /// <param name="Behavior">
        /// 
        ///  behavior
        /// ViInt32
        /// Specifies how the output should behave when the current limit is
        ///           reached.
        /// 
        /// 
        ///           Defined Values:
        /// 
        ///           NIDCPOWER_VAL_CURRENT_REGULATEControls output current so that it does not exceed the current limit.  Power continues to generate even if the current limit is reached.
        ///           
        ///           
        /// 
        /// </param>
        /// <param name="Limit">
        /// 
        ///  limit
        /// ViReal64
        /// Specifies the current limit, in amps, on the specified channel(s).
        /// 
        /// 
        /// 
        /// 
        /// 
        /// Valid Values:
        /// 
        /// The valid values for this parameter are defined by the current limit range that is configured using the niDCPower_ConfigureCurrentLimitRange function.
        /// 
        /// 
        /// 
        /// 
        /// 
        /// 
        /// 
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int ConfigureCurrentLimit(string Channel_Name, int Behavior, double Limit)
        {
            int pInvokeResult = PInvoke.ConfigureCurrentLimit(this._handle, Channel_Name, Behavior, Limit);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_ConfigureCurrentLimitRange
        /// 
        /// 
        ///  ViStatus niDCPower_ConfigureCurrentLimitRange(ViSession vi,
        ///                                                 ViConstString channelName,
        ///                                                 ViReal64 range);
        ///  Purpose
        /// Configures the current limit range for the specified channel(s).The configured range defines the valid values  the current limit can be set to using the niDCPower_ConfigureCurrentLimit function. The current limit range setting is applicable only if the output function of the channel is set to NIDCPOWER_VAL_DC_VOLTAGE. Use niDCPower_ConfigureOutputFunction to set the output function.
        /// Use the NIDCPOWER_ATTR_CURRENT_LIMIT_AUTORANGE attribute to enable automatic selection of the current limit range.
        /// 
        /// </summary>
        /// <param name="Channel_Name">
        /// 
        /// 
        /// channelName
        /// ViConstString
        /// Specifies to which output channel(s) to apply this configuration value. Specify multiple channels by using a channel list or a channel range. A channel list is a comma (,) separated sequence of channel names (for example, 0,2 specifies channels 0 and 2). A channel range is a lower bound channel followed by a hyphen (-) or colon (:) followed by an upper bound channel (for example, 0-2 specifies channels 0, 1, and 2). In the Running state, multiple output channel configurations are performed sequentially based on the order specified in this parameter. If there is only one channel in the session, you do not need to specify the channel name.
        ///  
        /// </param>
        /// <param name="Range">
        /// 
        /// 
        ///  range
        /// ViReal64
        /// Specifies the current limit range, in amps, for the specified channel.
        /// 
        /// 
        /// 
        /// 
        /// For valid ranges, refer to the Ranges topic for your device in the NI DC Power Supplies and SMUs Help.
        /// 
        /// 
        /// 
        /// 
        /// 
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int ConfigureCurrentLimitRange(string Channel_Name, double Range)
        {
            int pInvokeResult = PInvoke.ConfigureCurrentLimitRange(this._handle, Channel_Name, Range);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_ConfigureOutputResistance
        /// 
        /// 
        ///  ViStatus niDCPower_ConfigureOutputResistance(ViSession vi, ViConstString channelName, ViReal64 resistance);
        ///  Purpose
        /// Configures the output resistance that the device attempts to generate for the specified channel or channels. The channel must be enabled for the specified output resistance to take effect.
        /// 
        /// Refer to the  niDCPower_ConfigureOutputEnabled function for more information about enabling the output channel. The output resistance setting is applicable only if the output function of the channel is set to  NIDCPOWER_VAL_DC_VOLTAGE using the niDCPower_ConfigureOutputFunction function.
        /// 
        /// The device actively regulates the current and voltage to reach the specified output resistance, although in DC Voltage output mode, the voltage at the output experiences a "virtual drop" that is proportional to its current.
        /// 
        /// 
        /// Note&#160;&#160;This function is not supported on all devices. Refer to Supported Functions by Device for more information about supported devices.
        /// 
        /// 
        /// </summary>
        /// <param name="Channel_Name">
        /// 
        /// 
        /// channelName
        /// ViConstString
        /// Specifies to which output channel(s) to apply this configuration value. Specify multiple channels by using a channel list or a channel range. A channel list is a comma (,) separated sequence of channel names (for example, 0,2 specifies channels 0 and 2). A channel range is a lower bound channel followed by a hyphen (-) or colon (:) followed by an upper bound channel (for example, 0-2 specifies channels 0, 1, and 2). In the Running state, multiple output channel configurations are performed sequentially based on the order specified in this parameter. If there is only one channel in the session, you do not need to specify the channel name.
        ///  
        /// </param>
        /// <param name="Resistance">
        /// 
        /// 
        ///  resistance
        /// ViReal64
        /// Specifies the output resistance, in ohms, for the specified channel. Refer to the NI PXIe-4141 Programmable Output Resistance, NI PXIe-4143 Programmable Output Resistance, or NI PXIe-4154 Programmable Output Resistance topic in the NI DC Power Supplies and SMUs Help for more information about configuring output resistance.
        /// 
        /// 
        /// 
        /// 
        /// 
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int ConfigureOutputResistance(string Channel_Name, double Resistance)
        {
            int pInvokeResult = PInvoke.ConfigureOutputResistance(this._handle, Channel_Name, Resistance);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// 
        /// niDCPower_ConfigureCurrentLevel
        /// 
        /// 
        ///  ViStatus niDCPower_ConfigureCurrentLevel(ViSession vi,
        ///                                                 ViConstString channelName,
        ///                                                 ViReal64 level);
        ///  Purpose
        /// Configures the current level the device attempts to generate for the specified 
        ///       channel(s). The channel must be enabled for the specified current level to take effect.  Refer to the niDCPower_ConfigureOutputEnabled function for more information about enabling the output channel.  The current level setting is applicable only if the output function of the channel is set to NIDCPOWER_VAL_DC_CURRENT. Use niDCPower_ConfigureOutputFunction to set the output function. The device actively regulates the current at the specified level unless doing so causes a voltage greater than the voltage limit across the channels' output terminals.
        ///     
        /// 
        /// </summary>
        /// <param name="Channel_Name">
        /// 
        /// 
        /// channelName
        /// ViConstString
        /// Specifies to which output channel(s) to apply this configuration value. Specify multiple channels by using a channel list or a channel range. A channel list is a comma (,) separated sequence of channel names (for example, 0,2 specifies channels 0 and 2). A channel range is a lower bound channel followed by a hyphen (-) or colon (:) followed by an upper bound channel (for example, 0-2 specifies channels 0, 1, and 2). In the Running state, multiple output channel configurations are performed sequentially based on the order specified in this parameter. If there is only one channel in the session, you do not need to specify the channel name.
        ///  
        /// </param>
        /// <param name="Level">
        /// 
        ///  level
        /// ViReal64
        /// Specifies the current level, in amps, to generate for the specified channel(s).
        /// 
        /// 
        /// 
        /// 
        /// Valid Values:
        /// 
        /// The valid values for this parameter are defined by the current level range that is configured using the niDCPower_ConfigureCurrentLevelRange function.
        /// 
        /// 
        /// 
        /// 
        /// 
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int ConfigureCurrentLevel(string Channel_Name, double Level)
        {
            int pInvokeResult = PInvoke.ConfigureCurrentLevel(this._handle, Channel_Name, Level);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_ConfigureCurrentLevelRange
        /// 
        /// 
        ///  ViStatus niDCPower_ConfigureCurrentLevelRange(ViSession vi,
        ///                                                 ViConstString channelName,
        ///                                                 ViReal64 range);
        ///  Purpose
        /// Configures the current level range for the specified channel(s).  The configured range defines the valid values the current level can be set to using the niDCPower_ConfigureCurrentLevel function.  The current level range setting is applicable only if the output function of the channel is set to NIDCPOWER_VAL_DC_CURRENT. Use niDCPower_ConfigureOutputFunction to set the output function. 
        /// 
        /// Use the NIDCPOWER_ATTR_CURRENT_LEVEL_AUTORANGE attribute to enable automatic selection of the current level range. 
        /// 
        /// </summary>
        /// <param name="Channel_Name">
        /// 
        /// 
        /// channelName
        /// ViConstString
        /// Specifies to which output channel(s) to apply this configuration value. Specify multiple channels by using a channel list or a channel range. A channel list is a comma (,) separated sequence of channel names (for example, 0,2 specifies channels 0 and 2). A channel range is a lower bound channel followed by a hyphen (-) or colon (:) followed by an upper bound channel (for example, 0-2 specifies channels 0, 1, and 2). In the Running state, multiple output channel configurations are performed sequentially based on the order specified in this parameter. If there is only one channel in the session, you do not need to specify the channel name.
        ///  
        /// </param>
        /// <param name="Range">
        /// 
        ///  range
        /// ViReal64
        /// Specifies the current level range, in amps,  for the specified channel.
        /// 
        /// 
        /// 
        /// For valid ranges, refer to the Ranges topic for your device in the NI DC Power Supplies and SMUs Help.
        /// 
        /// 
        /// 
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int ConfigureCurrentLevelRange(string Channel_Name, double Range)
        {
            int pInvokeResult = PInvoke.ConfigureCurrentLevelRange(this._handle, Channel_Name, Range);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// 
        /// niDCPower_ConfigureVoltageLimit
        /// 
        /// 
        ///  ViStatus niDCPower_ConfigureVoltageLimit(ViSession vi,
        ///                                                 ViConstString channelName,
        ///                                                 ViReal64 limit);
        ///  Purpose
        /// Configures the voltage limit for the specified channel(s). The channel must be enabled for the specified voltage limit to take effect.
        ///       Refer to the niDCPower_ConfigureOutputEnabled function for more information about enabling the output channel.
        /// 
        /// The voltage limit is the voltage that the output should not exceed when generating the desired current level.   The voltage limit setting is applicable only if the output function of the channel is set to NIDCPOWER_VAL_DC_CURRENT. Use niDCPower_ConfigureOutputFunction to set the output function.
        /// 
        /// </summary>
        /// <param name="Channel_Name">
        /// 
        /// 
        /// channelName
        /// ViConstString
        /// Specifies to which output channel(s) to apply this configuration value. Specify multiple channels by using a channel list or a channel range. A channel list is a comma (,) separated sequence of channel names (for example, 0,2 specifies channels 0 and 2). A channel range is a lower bound channel followed by a hyphen (-) or colon (:) followed by an upper bound channel (for example, 0-2 specifies channels 0, 1, and 2). In the Running state, multiple output channel configurations are performed sequentially based on the order specified in this parameter. If there is only one channel in the session, you do not need to specify the channel name.
        ///  
        /// </param>
        /// <param name="Limit">
        /// 
        ///  limit
        /// ViReal64
        /// Specifies the voltage limit, in volts, on the specified output channel(s).
        /// 
        /// 
        /// 
        /// 
        /// Valid Values:
        /// 
        /// The valid values for this parameter are defined by the voltage limit range that is configured using the  niDCPower_ConfigureVoltageLimitRange function.
        /// 
        /// 
        /// 
        /// 
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int ConfigureVoltageLimit(string Channel_Name, double Limit)
        {
            int pInvokeResult = PInvoke.ConfigureVoltageLimit(this._handle, Channel_Name, Limit);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// 
        /// niDCPower_ConfigureVoltageLimitRange
        /// 
        /// 
        ///  ViStatus niDCPower_ConfigureVoltageLimitRange(ViSession vi,
        ///                                                 ViConstString channelName,
        ///                                                 ViReal64 range);
        ///  Purpose
        /// Configures the voltage limit range for the specified
        ///       channel(s). The configured range defines the valid values the voltage limit can be set to using the niDCPower_ConfigureVoltageLimit function.
        ///      The voltage limit range setting is applicable only if the output function of the channel is set to NIDCPOWER_VAL_DC_CURRENT. Use niDCPower_ConfigureOutputFunction to set the output function.
        /// Use the NIDCPOWER_ATTR_VOLTAGE_LIMIT_AUTORANGE attribute to enable automatic selection of the voltage limit range.
        /// 
        /// </summary>
        /// <param name="Channel_Name">
        /// 
        /// 
        /// channelName
        /// ViConstString
        /// Specifies to which output channel(s) to apply this configuration value. Specify multiple channels by using a channel list or a channel range. A channel list is a comma (,) separated sequence of channel names (for example, 0,2 specifies channels 0 and 2). A channel range is a lower bound channel followed by a hyphen (-) or colon (:) followed by an upper bound channel (for example, 0-2 specifies channels 0, 1, and 2). In the Running state, multiple output channel configurations are performed sequentially based on the order specified in this parameter. If there is only one channel in the session, you do not need to specify the channel name.
        ///  
        /// </param>
        /// <param name="Range">
        /// 
        ///  range
        /// ViReal64
        /// Specifies the voltage limit range, in volts, on the specified channel(s).
        /// 
        /// 
        /// 
        /// 
        /// For valid ranges, refer to the Ranges topic for your device in the NI DC Power Supplies and SMUs Help.
        /// 
        /// 
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int ConfigureVoltageLimitRange(string Channel_Name, double Range)
        {
            int pInvokeResult = PInvoke.ConfigureVoltageLimitRange(this._handle, Channel_Name, Range);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_ConfigureSourceMode
        /// 
        /// ViStatus niDCPower_ConfigureSourceMode(ViSession vi, 
        ///       ViInt32 sourceMode);
        /// 
        /// Purpose
        /// 
        /// Configures the NIDCPOWER_ATTR_SOURCE_MODE attribute. Specifies whether to run a single output point or a sequence. Refer to the 
        /// 
        /// Single Point Source Mode and Sequence Source Mode topics in the NI DC Power Supplies and SMUs Help for more information about using this function.
        /// 
        /// </summary>
        /// <param name="Source_Mode">
        /// 
        ///  sourceMode
        /// ViInt32
        /// Specifies the source mode for the NI-DCPower session.
        /// 
        /// 
        /// 
        /// Defined Values:
        /// 
        /// NIDCPOWER_VAL_SINGLE_POINT (1020)Applies a single source configuration.
        /// NIDCPOWER_VAL_SEQUENCE (1021)Applies a list of voltage or current configurations sequentially.
        /// 
        /// 
        /// 
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int ConfigureSourceMode(int Source_Mode)
        {
            int pInvokeResult = PInvoke.ConfigureSourceMode(this._handle, Source_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_ConfigureOutputFunction
        /// 
        /// 
        ///  ViStatus niDCPower_ConfigureOutputFunction(ViSession vi,
        ///                                                  ViConstString channelName,
        ///                                                  ViInt32 function);
        ///  Purpose
        /// Configures the function the device attempts to generate for the specified channel(s).
        /// 
        /// 
        /// When NIDCPOWER_VAL_DC_VOLTAGE is selected, the device generates the desired voltage level on the output as long as the output current is below the current limit. The following functions can be used to configure the channel when NIDCPOWER_VAL_DC_VOLTAGE is selected:
        /// niDCPower_ConfigureVoltageLevel
        /// niDCPower_ConfigureCurrentLimit
        /// 
        /// niDCPower_ConfigureVoltageLevelRange
        /// 
        /// niDCPower_ConfigureCurrentLimitRange
        /// 
        /// When NIDCPOWER_VAL_DC_CURRENT is selected, the device generates the desired current level on the output as long as the output voltage is below the voltage limit.  The following functions can be used to configure the channel when NIDCPOWER_VAL_DC_CURRENT is selected:
        /// niDCPower_ConfigureCurrentLevel
        /// 
        /// niDCPower_ConfigureVoltageLimit
        /// 
        /// niDCPower_ConfigureCurrentLevelRange
        /// 
        /// niDCPower_ConfigureVoltageLimitRange
        /// 
        /// </summary>
        /// <param name="Channel_Name">
        /// 
        /// 
        /// channelName
        /// ViConstString
        /// Specifies to which output channel(s) to apply this configuration value. Specify multiple channels by using a channel list or a channel range. A channel list is a comma (,) separated sequence of channel names (for example, 0,2 specifies channels 0 and 2). A channel range is a lower bound channel followed by a hyphen (-) or colon (:) followed by an upper bound channel (for example, 0-2 specifies channels 0, 1, and 2). In the Running state, multiple output channel configurations are performed sequentially based on the order specified in this parameter. If there is only one channel in the session, you do not need to specify the channel name.
        ///  
        /// </param>
        /// <param name="Function">
        /// 
        ///  function
        /// ViInt32
        /// Configures the function to generate for the specified channel(s).
        /// 
        /// 
        /// 
        /// Defined Values:
        /// 
        /// NIDCPOWER_VAL_DC_VOLTAGE (1006)Sets the output function to DC voltage.
        /// NIDCPOWER_VAL_DC_CURRENT (1007)Sets the output function to DC current.
        /// 
        /// 
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int ConfigureOutputFunction(string Channel_Name, int Function)
        {
            int pInvokeResult = PInvoke.ConfigureOutputFunction(this._handle, Channel_Name, Function);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_SetSequence
        /// 
        /// 
        ///  ViStatus niDCPower_SetSequence(ViSession vi,
        ///       ViConstString channelName,
        ///       ViReal64 values[],
        ///       ViReal64 sourceDelays[],
        ///       ViUInt32 size);
        /// 
        ///  Purpose
        /// 
        /// Configures a series of voltage or current outputs and corresponding source delays. The source mode must be set to Sequence for this function to take effect.
        /// 
        /// Refer to the Configuring the Source Unit topic in the NI DC Power Supplies and SMUs Help for more information about how to configure your device.
        /// 
        /// Use this function in the Uncommitted or Committed programming states. Refer to the Programming States topic in the NI DC Power Supplies and SMUs Help for more information about NI-DCPower programming states.
        /// 
        /// 
        /// Note&#160;&#160;This function is not supported on all devices. Refer to Supported Functions by Device for more information about supported devices.
        /// 
        /// 
        /// </summary>
        /// <param name="Channel_Name">
        /// 
        /// 
        /// channelName
        /// ViConstString
        /// Specifies to which output channel(s) to apply this configuration value. Specify multiple channels by using a channel list or a channel range. A channel list is a comma (,) separated sequence of channel names (for example, 0,2 specifies channels 0 and 2). A channel range is a lower bound channel followed by a hyphen (-) or colon (:) followed by an upper bound channel (for example, 0-2 specifies channels 0, 1, and 2). In the Running state, multiple output channel configurations are performed sequentially based on the order specified in this parameter. If there is only one channel in the session, you do not need to specify the channel name.
        ///  
        /// </param>
        /// <param name="Values">
        /// 
        ///  values
        /// ViReal64[]
        /// Specifies the series of voltage levels or current levels, depending on the configured output function.
        /// 
        /// 
        /// 
        /// 
        /// 
        /// Valid Values:
        /// 
        /// The valid values for this parameter are defined by the voltage level range or current level range.
        /// 
        /// </param>
        /// <param name="Source_Delays">
        /// 
        ///  sourceDelays
        /// ViReal64[]
        /// Specifies the source delay that follows the configuration of each value in the sequence.
        /// 
        /// 
        /// 
        /// 
        /// 
        /// Valid Values:
        /// 
        /// The valid values are 
        /// 0 and 167 seconds.
        /// </param>
        /// <param name="Size">
        /// 
        ///  size
        /// ViUInt32
        /// 
        /// The number of elements in the Values and the Source Delays arrays. The Values and Source Delays arrays should have the same size.
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int SetSequence(string Channel_Name, double[] Values, double[] Source_Delays, uint Size)
        {
            int pInvokeResult = PInvoke.SetSequence(this._handle, Channel_Name, Values, Source_Delays, Size);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_ConfigureOutputEnabled
        /// 
        /// 
        ///  ViStatus niDCPower_ConfigureOutputEnabled(ViSession vi,
        ///                                                  ViConstString channelName,
        ///                                                  ViBoolean enabled);
        ///  Purpose
        /// Enables or disables generation on the specified  channel(s).  Depending on the selected output function, the voltage level or the current level must be set in addition to enabling the output to generate the desired level.  Refer to the niDCPower_ConfigureVoltageLevel function, the niDCPower_ConfigureCurrentLevel function, and the niDCPower_ConfigureOutputFunction function for more information about configuring the desired output level.
        /// 
        /// 
        /// Note&#160;&#160;If the device is in the Uncommitted state, enabling the output does not take effect until you call the niDCPower_Initiate function.
        /// 
        /// </summary>
        /// <param name="Channel_Name">
        /// 
        /// 
        /// channelName
        /// ViConstString
        /// Specifies to which output channel(s) to apply this configuration value. Specify multiple channels by using a channel list or a channel range. A channel list is a comma (,) separated sequence of channel names (for example, 0,2 specifies channels 0 and 2). A channel range is a lower bound channel followed by a hyphen (-) or colon (:) followed by an upper bound channel (for example, 0-2 specifies channels 0, 1, and 2). In the Running state, multiple output channel configurations are performed sequentially based on the order specified in this parameter. If there is only one channel in the session, you do not need to specify the channel name.
        ///  
        /// </param>
        /// <param name="Enabled">
        /// 
        ///  enabled
        /// ViBoolean
        /// Specifies whether the output is enabled or disabled.
        /// 
        /// 
        /// 
        /// Defined Values:
        /// 
        /// VI_TRUEEnables generation on the specified output channel(s).
        /// VI_FALSEDisables generation on the specified output channel(s).
        /// 
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int ConfigureOutputEnabled(string Channel_Name, bool Enabled)
        {
            int pInvokeResult = PInvoke.ConfigureOutputEnabled(this._handle, Channel_Name, System.Convert.ToUInt16(Enabled));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_ConfigureApertureTime
        /// 
        /// ViStatus niDCPower_ConfigureApertureTime(ViSession vi,
        ///       ViConstString channelName,
        ///       ViReal64 apertureTime,
        ///       ViInt32 units);
        /// 
        ///  Purpose
        /// 
        /// Configures the aperture time on the specified channel(s).
        /// 
        /// 
        /// Note&#160;&#160;This function is not supported on all devices. Refer to Supported Functions by Device for more information about supported devices.
        /// 
        /// The supported values depend on the units. Refer to the Aperture Time topic for your device in the NI DC Power Supplies and SMUs Help for more information. In general, devices support discrete apertureTime values, and if you configure apertureTime to some unsupported value, NI-DCPower coerces it up to the next supported value.
        /// 
        /// Refer to the Measurement Configuration and Timing or DC Noise Rejection topic for your device in the NI DC Power Supplies and SMUs Help for more information about how to configure your measurements.
        /// 
        ///   
        /// 
        /// </summary>
        /// <param name="Channel_Name">
        /// 
        /// 
        /// channelName
        /// ViConstString
        /// Specifies to which output channel(s) to apply this configuration value. Specify multiple channels by using a channel list or a channel range. A channel list is a comma (,) separated sequence of channel names (for example, 0,2 specifies channels 0 and 2). A channel range is a lower bound channel followed by a hyphen (-) or colon (:) followed by an upper bound channel (for example, 0-2 specifies channels 0, 1, and 2). In the Running state, multiple output channel configurations are performed sequentially based on the order specified in this parameter. If there is only one channel in the session, you do not need to specify the channel name.
        ///  
        /// </param>
        /// <param name="Aperture_Time">
        /// 
        /// 
        /// apertureTime
        /// ViReal64
        /// Specifies the aperture time. Refer to the Aperture Time topic for your device in the NI DC Power Supplies and SMUs Help for more information.
        /// 
        ///  
        /// </param>
        /// <param name="Units">
        /// 
        /// 
        ///  units
        /// ViInt32
        /// Specifies the units for apertureTime.
        /// 
        /// 
        /// 
        /// Defined Values:
        /// 
        /// NIDCPOWER_VAL_SECONDS (1028)Specifies seconds.
        /// NIDCPOWER_VAL_POWER_LINE_CYCLES (1029)Specifies Power Line Cycles.
        /// 
        /// 
        /// 
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int ConfigureApertureTime(string Channel_Name, double Aperture_Time, int Units)
        {
            int pInvokeResult = PInvoke.ConfigureApertureTime(this._handle, Channel_Name, Aperture_Time, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_ConfigureAutoZero
        /// 
        /// 
        ///  ViStatus niDCPower_ConfigureAutoZero(ViSession vi,
        ///       ViConstString channelName,
        ///       ViInt32 autoZero);
        /// 
        ///  Purpose
        /// 
        /// Configures auto zero for the device.
        /// 
        /// 
        /// Note&#160;&#160;This function is not supported on all devices. Refer to Supported Functions by Device for more information about supported devices.
        /// 
        /// 
        /// Refer to the NI PXI-4132 Auto Zero and NI PXI-4132 Measurement Configuration and Timing topics in the NI DC Power Supplies and SMUs Help for more information about how to configure your measurements.
        /// 
        /// 
        /// 
        /// </summary>
        /// <param name="Channel_Name">
        /// 
        /// 
        /// channelName
        /// ViConstString
        /// Specifies to which output channel(s) to apply this configuration value. Specify multiple channels by using a channel list or a channel range. A channel list is a comma (,) separated sequence of channel names (for example, 0,2 specifies channels 0 and 2). A channel range is a lower bound channel followed by a hyphen (-) or colon (:) followed by an upper bound channel (for example, 0-2 specifies channels 0, 1, and 2). In the Running state, multiple output channel configurations are performed sequentially based on the order specified in this parameter. If there is only one channel in the session, you do not need to specify the channel name.
        ///  
        /// </param>
        /// <param name="Auto_Zero">
        /// 
        /// 
        ///  autoZero
        /// ViInt32
        ///  Specifies the auto-zero setting. Refer to the Measurement Configuration and Timing topic and the Auto Zero topic for your device for more information about how to configure your measurements.
        /// 
        /// 
        /// 
        /// Defined Values:
        /// 
        /// NIDCPOWER_VAL_OFF (0)Disables auto-zero. 
        /// NIDCPOWER_VAL_ONCE (1024)Makes zero conversions following the first measurement after initiating the device. The device uses these zero conversions for the preceding measurement and future measurements until the device is reinitiated.
        /// NIDCPOWER_VAL_ON (1)Makes zero conversions for every measurement.
        ///            
        /// 
        /// 
        /// 
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int ConfigureAutoZero(string Channel_Name, int Auto_Zero)
        {
            int pInvokeResult = PInvoke.ConfigureAutoZero(this._handle, Channel_Name, Auto_Zero);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_ConfigurePowerLineFrequency
        /// 
        /// 
        ///  ViStatus niDCPower_ConfigurePowerLineFrequency(ViSession vi,
        ///       ViReal64 powerLineFrequency);
        /// 
        ///  Purpose
        /// 
        /// Specifies the power line frequency. NI-DCPower uses this value to select a timebase for setting the niDCPower_ConfigureApertureTime function in power line cycles (PLCs).
        /// 
        /// 
        /// Note&#160;&#160;This function is not supported on all devices. Refer to Supported Functions by Device for more information about supported devices.
        /// 
        /// Refer to the Measurement Configuration and Timing topic for your device in the NI DC Power Supplies and SMUs Help for more information about how to configure your measurements.
        /// 
        ///   
        /// 
        /// </summary>
        /// <param name="Powerline_Frequency">
        /// 
        /// 
        /// powerLineFrequency
        /// ViReal64
        /// Specifies the power line frequency in hertz. The NI device uses this value to select a timebase for the 
        /// NIDCPOWER_ATTR_APERTURE_TIME attribute. Refer to the Measurement Configuration and Timing topic for your device for more information about how to configure your measurements.
        /// 
        /// 
        /// 
        /// 
        /// Note&#160;&#160;Set this parameter to the frequency of the AC power line.
        /// 
        /// Defined Values:
        /// 
        /// NIDCPOWER_VAL_50_HERTZ (50.0)Specifies 50 Hz.
        /// NIDCPOWER_VAL_60_HERTZ (60.0)Specifies 60 Hz.
        /// 
        ///  
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int ConfigurePowerLineFrequency(double Powerline_Frequency)
        {
            int pInvokeResult = PInvoke.ConfigurePowerLineFrequency(this._handle, Powerline_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_ConfigureSense
        /// 
        /// 
        ///  ViStatus niDCPower_ConfigureSense(ViSession vi,
        ///                                                  ViConstString channelName,
        ///                                                  ViInt32 sense);
        ///  Purpose
        /// Specifies whether to use local or remote sensing of the output voltage on the specified channel(s).  Refer to the Devices topic specific to your device in the NI DC Power Supplies and SMUs Help for more information about sensing voltage on supported channels.  
        /// 
        /// </summary>
        /// <param name="Channel_Name">
        /// 
        /// 
        /// channelName
        /// ViConstString
        /// Specifies to which output channel(s) to apply this configuration value. Specify multiple channels by using a channel list or a channel range. A channel list is a comma (,) separated sequence of channel names (for example, 0,2 specifies channels 0 and 2). A channel range is a lower bound channel followed by a hyphen (-) or colon (:) followed by an upper bound channel (for example, 0-2 specifies channels 0, 1, and 2). In the Running state, multiple output channel configurations are performed sequentially based on the order specified in this parameter. If there is only one channel in the session, you do not need to specify the channel name.
        ///  
        /// </param>
        /// <param name="Sense">
        /// 
        /// 
        ///  sense
        /// ViInt32
        ///  Specifies local or remote sensing on the specified channel(s).
        /// 
        /// 
        /// 
        /// Defined Values:
        /// 
        /// NIDCPOWER_VAL_LOCAL (1008)Local sensing NIDCPOWER_VAL_REMOTE (1009)Remote sensing
        /// 
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int ConfigureSense(string Channel_Name, int Sense)
        {
            int pInvokeResult = PInvoke.ConfigureSense(this._handle, Channel_Name, Sense);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_Measure
        /// 
        /// 
        ///  ViStatus niDCPower_Measure(ViSession vi,
        ///                                   ViConstString channelName,
        ///                                   ViInt32 measurementType,
        ///                                   ViReal64 *measurement)
        ///  Purpose
        /// Returns the measured value of either the voltage or current on the specified output channel. Each call to this function blocks
        ///       other function calls until the hardware returns the measurement.
        ///       To measure multiple output channels, use the 
        ///       niDCPower_MeasureMultiple function.
        /// 
        /// </summary>
        /// <param name="Channel_Name">
        /// 
        ///  channelName
        /// ViConstString
        /// Specifies the output channel to measure.   Only one measurement at a time may be made with the niDCPower_Measure function. Use the niDCPower_MeasureMultiple function to measure multiple channels.
        /// 
        /// </param>
        /// <param name="Measurement_Type">
        /// 
        ///  measurementType
        /// ViInt32
        /// Specifies whether a voltage or current value should be measured.
        /// 
        /// 
        /// Defined Values:
        /// 
        /// 
        /// NIDCPOWER_VAL_MEASURE_VOLTAGE (1)The device measures voltage. NIDCPOWER_VAL_MEASURE_CURRENT (0)The device measures current.
        /// </param>
        /// <param name="Measurement">
        /// 
        ///  measurement
        /// ViReal64*
        /// Returns the value of the measurement, either in volts for voltage or
        ///           amps for current.
        /// 
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int Measure(string Channel_Name, int Measurement_Type, out double Measurement)
        {
            int pInvokeResult = PInvoke.Measure(this._handle, Channel_Name, Measurement_Type, out Measurement);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_MeasureMultiple
        /// 
        /// 
        ///  ViStatus niDCPower_MeasureMultiple(ViSession vi,
        ///                                               ViConstString channelName,
        ///                                               ViReal64 voltageMeasurements[],
        ///                                               ViReal64 currentMeasurements[]);
        ///  Purpose
        /// Returns arrays of the measured voltage and current values
        ///       on the specified output channel(s). Each call to this function
        ///       blocks other function calls until the measurements are returned from the
        ///       device. The order of the measurements returned in the array corresponds to the
        ///       order on the specified output channel(s).
        /// 
        /// </summary>
        /// <param name="Channel_Name">
        /// 
        ///  channelName
        /// ViConstString
        /// Specifies the output channels to measure. You can specify multiple channels by using a channel list or a channel range. A channel list is a comma (,) separated sequence of channel names (e.g. 0,2 specifies channels 0 and 2). A channel range is a lower bound channel followed by a hyphen (-) or colon (:) followed by an upper bound channel (e.g. 0-2 specifies channels 0, 1, and 2).
        /// 
        /// </param>
        /// <param name="Voltage_Measurements">
        /// 
        ///  voltageMeasurements
        /// ViReal64[]
        /// Returns an array of voltage measurements. The measurements in the array are returned in the same order as the channels specified in channelName. Ensure that sufficient space has been allocated for the returned array.
        /// 
        /// </param>
        /// <param name="Current_Measurements">
        /// 
        ///  currentMeasurements
        /// ViReal64[]
        /// Returns an array of current measurements. The measurements in the array are returned in the same order as the channels specified in channelName. Ensure that sufficient space has been allocated for the returned array.
        /// 
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int MeasureMultiple(string Channel_Name, double[] Voltage_Measurements, double[] Current_Measurements)
        {
            int pInvokeResult = PInvoke.MeasureMultiple(this._handle, Channel_Name, Voltage_Measurements, Current_Measurements);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_FetchMultiple
        /// 
        /// ViStatus niDCPower_FetchMultiple(ViSession vi,
        ///       ViConstString channelName,
        ///       ViReal64 timeout,
        ///       ViInt32 count,
        ///       ViReal64 voltageMeasurements[],
        ///       ViReal64 currentMeasurements[],
        ///       ViBoolean inCompliance[],
        ///       ViInt32* actualCount);
        /// 
        ///  Purpose
        /// 
        /// Returns an array of voltage measurements, an array of current measurements, and an array of compliance measurements that were previously taken and are stored in the NI-DCPower buffer. This function should not be used when the 
        /// 
        ///  NIDCPOWER_ATTR_MEASURE_WHEN attribute is set to NIDCPOWER_VAL_ON_DEMAND. You must first call 
        /// niDCPower_Initiate before calling this function.
        /// 
        /// 
        /// Note&#160;&#160;This function is not supported on all devices. Refer to Supported Functions by Device for more information about supported devices.
        ///   
        /// Refer to the Acquiring Measurements and Compliance topics in the NI DC Power Supplies and SMUs Help for more information about configuring this function.
        /// 
        /// 
        /// 
        /// </summary>
        /// <param name="Channel_Name">
        /// 
        /// 
        /// channelName
        /// ViConstString
        /// Specifies to which output channel(s) to apply this configuration value. Specify multiple channels by using a channel list or a channel range. A channel list is a comma (,) separated sequence of channel names (for example, 0,2 specifies channels 0 and 2). A channel range is a lower bound channel followed by a hyphen (-) or colon (:) followed by an upper bound channel (for example, 0-2 specifies channels 0, 1, and 2). In the Running state, multiple output channel configurations are performed sequentially based on the order specified in this parameter. If there is only one channel in the session, you do not need to specify the channel name.
        ///  
        /// </param>
        /// <param name="Timeout">
        /// 
        /// 
        /// timeout
        /// ViReal64
        /// Specifies the maximum time allowed for this function to complete, in seconds. If the function does not complete within this time interval, NI-DCPower returns an error.
        /// 
        /// 
        /// 
        /// 
        /// Note&#160;&#160;When setting the timeout interval, ensure you take into account any triggers so that the timeout interval is long enough for your application.
        /// 
        /// 
        ///  
        /// </param>
        /// <param name="Count">
        /// 
        /// 
        /// count
        /// ViInt32
        /// Specifies the number of measurements to fetch.
        ///  
        /// </param>
        /// <param name="Voltage_Measurements">
        /// 
        ///  voltageMeasurements
        /// ViReal64[]
        /// Returns an array of voltage measurements. Ensure that sufficient space has been allocated for the returned array.
        /// 
        /// </param>
        /// <param name="Current_Measurements">
        /// 
        ///  currentMeasurements
        /// ViReal64[]
        /// Returns an array of current measurements. Ensure that sufficient space has been allocated for the returned array. 
        /// 
        /// </param>
        /// <param name="In_Compliance">
        /// 
        ///  inCompliance
        /// ViBoolean[]
        /// Returns an array of Boolean values indicating whether the output was in compliance at the time the measurement was taken. Ensure that sufficient space has been allocated for the returned array.
        /// 
        /// </param>
        /// <param name="Actual_Count">
        /// 
        ///  actualCount
        /// ViInt32*
        /// Indicates the number of measured values actually retrieved from the device.
        /// 
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int FetchMultiple(string Channel_Name, double Timeout, int Count, double[] Voltage_Measurements, double[] Current_Measurements, ushort[] In_Compliance, out int Actual_Count)
        {
            int pInvokeResult = PInvoke.FetchMultiple(this._handle, Channel_Name, Timeout, Count, Voltage_Measurements, Current_Measurements, In_Compliance, out Actual_Count);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_QueryInCompliance
        /// 
        ///  ViStatus niDCPower_QueryInCompliance(ViSession vi,
        ///                                            ViConstString channelName,
        ///                                            
        ///                                            ViBoolean *inCompliance);
        ///  Purpose
        /// Queries the specified output device to determine if it is operating at the compliance limit.
        /// 
        /// The compliance limit is the current limit when the output function is set to NIDCPOWER_VAL_DC_VOLTAGE.  If the output is operating at the compliance limit, the output reaches the current limit before the desired voltage level.  Refer to the niDCPower_ConfigureOutputFunction function and the niDCPower_ConfigureCurrentLimit function for more information about output function and current limit, respectively. 
        /// 
        /// The compliance limit is the voltage limit when the output function is set to NIDCPOWER_VAL_DC_CURRENT.  If the output is operating at the compliance limit, the output reaches the voltage limit before the desired current level.  Refer to the niDCPower_ConfigureOutputFunction function and the niDCPower_ConfigureVoltageLimit function for more information about output function and voltage limit, respectively.
        /// </summary>
        /// <param name="Channel_Name">
        /// 
        ///  channelName
        /// ViConstString
        /// Specifies the output channel to query. Compliance status can only be queried for one channel at a time.
        /// 
        /// </param>
        /// <param name="In_Compliance">
        /// 
        ///  inCompliance
        /// ViBoolean*
        /// Returns whether the device output channel is in compliance.
        /// 
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int QueryInCompliance(string Channel_Name, out bool In_Compliance)
        {
            ushort In_ComplianceAsUShort;
            int pInvokeResult = PInvoke.QueryInCompliance(this._handle, Channel_Name, out In_ComplianceAsUShort);
            In_Compliance = System.Convert.ToBoolean(In_ComplianceAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_QueryOutputState
        /// 
        ///  ViStatus niDCPower_QueryOutputState(ViSession vi,
        ///                                            ViConstString channelName,
        ///                                            ViInt32 outputState,
        ///                                            ViBoolean  *inState);
        ///  Purpose
        /// Queries the specified output channel to determine if the output channel is currently in the state specified by outputState.
        /// 
        /// </summary>
        /// <param name="Channel_Name">
        /// 
        ///  channelName
        /// ViConstString
        /// Specifies the output channel to query.  The output state may only be queried for one channel at a time.
        /// 
        /// </param>
        /// <param name="Output_State">
        ///  
        ///  outputState
        /// ViInt32
        /// Specifies the output state of the output channel that is being queried.
        /// 
        /// 
        /// Defined Values:
        /// NIDCPOWER_VAL_OUTPUT_CONSTANT_VOLTAGE (0)The device maintains a constant
        ///           voltage by adjusting the current.
        ///   NIDCPOWER_VAL_OUTPUT_CONSTANT_CURRENT (1)The device maintains a constant
        ///           current by adjusting the voltage.
        /// </param>
        /// <param name="In_State">
        /// 
        ///  inState
        /// ViBoolean*
        /// Returns whether the device output channel is in the specified output state.
        /// 
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int QueryOutputState(string Channel_Name, int Output_State, out bool In_State)
        {
            ushort In_StateAsUShort;
            int pInvokeResult = PInvoke.QueryOutputState(this._handle, Channel_Name, Output_State, out In_StateAsUShort);
            In_State = System.Convert.ToBoolean(In_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_Commit
        /// 
        /// 
        ///  ViStatus niDCPower_Commit(ViSession vi);
        /// 
        ///  Purpose
        /// 
        /// Applies previously configured settings to the device. Calling this function moves the NI-DCPower session from the Uncommitted state into the Committed state. After calling this function, modifying any attribute reverts the NI-DCPower session to the Uncommitted state. Use the niDCPower_Initiate function to transition to the Running state. Refer to the Programming States topic in the NI DC Power Supplies and SMUs Help for details about the specific NI-DCPower software states.
        /// 
        /// 
        /// 
        /// 
        /// </summary>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int Commit()
        {
            int pInvokeResult = PInvoke.Commit(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_Initiate
        /// 
        ///  ViStatus niDCPower_Initiate(ViSession vi);
        /// 
        ///  Purpose
        /// 
        /// 
        /// Starts generation or acquisition, causing the NI-DCPower session to leave the Uncommitted state or Committed state and enter the Running state. To return to the Committed state call the niDCPower_Abort function. Refer to the Programming States topic in the NI DC Power Supplies and SMUs Help for information about the specific NI-DCPower software states.
        /// 
        /// 
        /// 
        /// </summary>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int Initiate()
        {
            int pInvokeResult = PInvoke.Initiate(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// 
        /// niDCPower_Abort
        /// 
        /// 
        ///  ViStatus niDCPower_Abort(ViSession vi);
        ///  Purpose
        ///  Transitions the NI-DCPower session from the Running state to the Committed state. If a sequence is running, it is stopped. Any
        ///       configuration functions called after this function are not
        ///       applied until the niDCPower_Initiate function is called. If power output
        ///       is enabled when you call the niDCPower_Abort function, the output channels remain
        ///       in their current state and continue providing power.Use the niDCPower_ConfigureOutputEnabled function to disable power output
        ///       on a per channel basis. Use the niDCPower_reset function to disable
        ///       output on all channels. 
        /// Refer to the Programming States topic in the NI DC Power Supplies and SMUs Help for information about the specific NI-DCPower software states.
        /// 
        /// </summary>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int Abort()
        {
            int pInvokeResult = PInvoke.Abort(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_ConfigureDigitalEdgeStartTrigger
        /// 
        ///  ViStatus niDCPower_ConfigureDigitalEdgeStartTrigger(ViSession vi,
        ///       ViConstString inputTerminal,
        ///       ViInt32 edge);
        /// 
        ///  Purpose
        /// 
        /// Configures the Start trigger for digital edge triggering.
        /// 
        /// 
        /// Note&#160;&#160;This function is not supported on all devices. Refer to Supported Functions by Device for more information about supported devices.
        /// 
        /// </summary>
        /// <param name="Input_Terminal">
        /// 
        /// 
        /// inputTerminal
        /// ViConstString
        /// Specifies the input terminal for the digital edge Start trigger.
        /// 
        /// You can specify any valid input terminal for this function. Valid terminals are listed in MAX under the Device Routes tab.
        /// 
        /// Input terminals can be specified in one of two ways. If the device is named Dev1 and your terminal is PXI_Trig0, you can specify the terminal with the fully qualified terminal name, /Dev1/PXI_Trig0, or with the shortened terminal name, PXI_Trig0. The input terminal can also be a terminal from another device. For example, you can set the input terminal on Dev1 to be /Dev2/SourceCompleteEvent.
        ///  
        /// </param>
        /// <param name="Edge">
        /// 
        /// 
        /// edge
        /// ViInt32
        /// Specifies whether to configure the Start trigger to assert on the rising or falling edge.
        /// 
        /// 
        /// 
        /// Defined Values:
        /// 
        /// NIDCPOWER_VAL_RISING (1016)Asserts the trigger on the rising edge of the digital signal. 
        /// NIDCPOWER_VAL_FALLING (1017)Asserts the trigger on the falling edge of the digital signal.
        /// 
        /// 
        ///  
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int ConfigureDigitalEdgeStartTrigger(string Input_Terminal, int Edge)
        {
            int pInvokeResult = PInvoke.ConfigureDigitalEdgeStartTrigger(this._handle, Input_Terminal, Edge);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_ConfigureSoftwareEdgeStartTrigger
        /// 
        /// 
        ///  ViStatus niDCPower_ConfigureSoftwareEdgeStartTrigger(ViSession vi);
        /// 
        ///  Purpose
        /// 
        /// Configures the Start trigger for software triggering. Use the niDCPower_SendSoftwareEdgeTrigger  function to assert the trigger condition.
        /// 
        /// 
        /// Note&#160;&#160;This function is not supported on all devices. Refer to Supported Functions by Device for more information about supported devices.
        /// 
        /// </summary>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int ConfigureSoftwareEdgeStartTrigger()
        {
            int pInvokeResult = PInvoke.ConfigureSoftwareEdgeStartTrigger(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_DisableStartTrigger
        /// 
        /// 
        ///  ViStatus niDCPower_DisableStartTrigger(ViSession vi);
        /// 
        ///  Purpose
        /// 
        /// Disables the Start trigger. The device does not wait for a Start trigger when starting generation or acquisition.
        /// 
        /// 
        /// Note&#160;&#160;This function is not supported on all devices. Refer to Supported Functions by Device for more information about supported devices.
        /// 
        /// </summary>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int DisableStartTrigger()
        {
            int pInvokeResult = PInvoke.DisableStartTrigger(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_ConfigureDigitalEdgeSourceTrigger
        /// 
        /// 
        ///  ViStatus niDCPower_ConfigureDigitalEdgeSourceTrigger(ViSession vi,
        ///       ViConstString inputTerminal,
        ///       ViInt32 edge);
        /// 
        ///  Purpose
        /// 
        ///  Configures the Source trigger for digital edge triggering.
        /// 
        /// 
        /// Note&#160;&#160;This function is not supported on all devices. Refer to Supported Functions by Device for more information about supported devices.
        /// 
        /// </summary>
        /// <param name="Input_Terminal">
        /// 
        /// 
        /// inputTerminal
        /// ViConstString
        /// Specifies the input terminal for the digital edge Source trigger.
        /// 
        /// You can specify any valid input terminal for this function. Valid terminals are listed in MAX under the Device Routes tab.
        /// 
        /// Input terminals can be specified in one of two ways. If the device is named Dev1 and your terminal is PXI_Trig0, you can specify the terminal with the fully qualified terminal name, /Dev1/PXI_Trig0, or with the shortened terminal name, PXI_Trig0. The input terminal can also be a terminal from another device. For example, you can set the input terminal on Dev1 to be /Dev2/SourceCompleteEvent.
        ///  
        /// </param>
        /// <param name="Edge">
        /// 
        /// 
        /// edge
        /// ViInt32
        /// Specifies whether to configure the Source trigger to assert on the rising or falling edge.
        /// 
        /// 
        /// Defined Values:
        /// 
        /// NIDCPOWER_VAL_RISING (1016)Asserts the trigger on the rising edge of the digital signal. 
        /// NIDCPOWER_VAL_FALLING (1017)Asserts the trigger on the falling edge of the digital signal.
        /// 
        /// 
        ///  
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int ConfigureDigitalEdgeSourceTrigger(string Input_Terminal, int Edge)
        {
            int pInvokeResult = PInvoke.ConfigureDigitalEdgeSourceTrigger(this._handle, Input_Terminal, Edge);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_ConfigureSoftwareEdgeSourceTrigger
        /// 
        /// 
        ///  ViStatus niDCPower_ConfigureSoftwareEdgeSourceTrigger(ViSession vi);
        /// 
        ///  Purpose
        /// 
        /// Configures the Source trigger for software triggering. Use the niDCPower_SendSoftwareEdgeTrigger function to assert the trigger condition.
        /// 
        /// 
        /// Note&#160;&#160;This function is not supported on all devices. Refer to Supported Functions by Device for more information about supported devices.
        /// 
        /// </summary>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int ConfigureSoftwareEdgeSourceTrigger()
        {
            int pInvokeResult = PInvoke.ConfigureSoftwareEdgeSourceTrigger(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_DisableSourceTrigger
        /// 
        /// 
        ///  ViStatus niDCPower_DisableSourceTrigger(ViSession vi);
        /// 
        ///  Purpose
        /// 
        /// Disables the Source trigger. The device does not wait for a source trigger before performing a source operation. Refer to the Single Point Source Mode and Sequence Source Mode topics for more information about the Source trigger.
        ///       
        /// 
        /// 
        /// 
        /// Note&#160;&#160;This function is not supported on all devices. Refer to Supported Functions by Device for more information about supported devices.
        /// 
        /// </summary>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int DisableSourceTrigger()
        {
            int pInvokeResult = PInvoke.DisableSourceTrigger(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_ConfigureDigitalEdgeMeasureTrigger
        /// 
        /// 
        ///  ViStatus niDCPower_ConfigureDigitalEdgeMeasureTrigger(ViSession vi,
        ///       ViConstString inputTerminal,
        ///       ViInt32 edge);
        /// 
        ///  Purpose
        /// Configures the Measure trigger for digital edge triggering.
        /// 
        /// 
        /// Note&#160;&#160;This function is not supported on all devices. Refer to Supported Functions by Device for more information about supported devices.
        /// 
        /// </summary>
        /// <param name="Input_Terminal">
        /// 
        /// 
        /// inputTerminal
        /// ViConstString
        /// Specifies the input terminal for the digital edge Measure trigger.
        /// 
        /// You can specify any valid input terminal for this function. Valid terminals are listed in MAX under the Device Routes tab.
        /// 
        /// Input terminals can be specified in one of two ways. If the device is named Dev1 and your terminal is PXI_Trig0, you can specify the terminal with the fully qualified terminal name, /Dev1/PXI_Trig0, or with the shortened terminal name, PXI_Trig0. The input terminal can also be a terminal from another device. For example, you can set the input terminal on Dev1 to be /Dev2/SourceCompleteEvent.
        ///  
        /// </param>
        /// <param name="Edge">
        /// 
        /// 
        /// edge
        /// ViInt32
        /// Specifies whether to configure the Measure trigger to assert on the rising or falling edge.
        /// 
        /// 
        /// Defined Values:
        /// 
        /// NIDCPOWER_VAL_RISING (1016)Asserts the trigger on the rising edge of the digital signal. 
        /// NIDCPOWER_VAL_FALLING (1017)Asserts the trigger on the falling edge of the digital signal.
        /// 
        /// 
        ///  
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int ConfigureDigitalEdgeMeasureTrigger(string Input_Terminal, int Edge)
        {
            int pInvokeResult = PInvoke.ConfigureDigitalEdgeMeasureTrigger(this._handle, Input_Terminal, Edge);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_ConfigureSoftwareEdgeMeasureTrigger
        /// 
        /// 
        ///  ViStatus niDCPower_ConfigureSoftwareEdgeMeasureTrigger(ViSession vi);
        /// 
        ///  Purpose
        /// 
        /// Configures the Measure trigger for software triggering. Use the niDCPower_SendSoftwareEdgeTrigger
        /// function to assert the trigger condition.
        /// 
        /// 
        /// Note&#160;&#160;This function is not supported on all devices. Refer to Supported Functions by Device for more information about supported devices.
        /// 
        /// </summary>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int ConfigureSoftwareEdgeMeasureTrigger()
        {
            int pInvokeResult = PInvoke.ConfigureSoftwareEdgeMeasureTrigger(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_ConfigureDigitalEdgeSequenceAdvanceTrigger
        /// 
        ///  ViStatus niDCPower_ConfigureDigitalEdgeSequenceAdvanceTrigger(ViSession vi,
        ///       ViConstString inputTerminal,
        ///       ViInt32 edge);
        /// 
        ///  Purpose
        /// 
        /// Configures the Sequence Advance trigger for digital edge triggering.
        /// 
        /// 
        /// Note&#160;&#160;This function is not supported on all devices. Refer to Supported Functions by Device for more information about supported devices.
        /// 
        /// 
        /// </summary>
        /// <param name="Input_Terminal">
        /// 
        /// 
        /// inputTerminal
        /// ViConstString
        /// Specifies the input terminal for the digital edge Sequence Advance trigger.
        /// 
        /// You can specify any valid input terminal for this function. Valid terminals are listed in MAX under the Device Routes tab.
        /// 
        /// Input terminals can be specified in one of two ways. If the device is named Dev1 and your terminal is PXI_Trig0, you can specify the terminal with the fully qualified terminal name, /Dev1/PXI_Trig0, or with the shortened terminal name, PXI_Trig0. The input terminal can also be a terminal from another device. For example, you can set the input terminal on Dev1 to be /Dev2/SourceCompleteEvent.
        ///  
        /// </param>
        /// <param name="Edge">
        /// 
        /// 
        /// edge
        /// ViInt32
        /// Specifies whether to configure the Sequence Advance trigger to assert on the rising or falling edge.
        /// 
        /// 
        /// 
        /// Defined Values:
        /// 
        /// NIDCPOWER_VAL_RISING (1016)Asserts the trigger on the rising edge of the digital signal. 
        /// NIDCPOWER_VAL_FALLING (1017)Asserts the trigger on the falling edge of the digital signal.
        /// 
        /// 
        ///  
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int ConfigureDigitalEdgeSequenceAdvanceTrigger(string Input_Terminal, int Edge)
        {
            int pInvokeResult = PInvoke.ConfigureDigitalEdgeSequenceAdvanceTrigger(this._handle, Input_Terminal, Edge);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// niDCPower_ConfigureSoftwareEdgeSequenceAdvanceTrigger
        /// 
        /// 
        ///  ViStatus niDCPower_ConfigureSoftwareEdgeSequenceAdvanceTrigger(ViSession vi);  
        /// 
        ///  Purpose
        /// 
        /// Configures the Sequence Advance trigger for software triggering. Use the niDCPower_SendSoftwareEdgeTrigger
        /// function to assert the trigger condition.
        /// 
        /// 
        /// Note&#160;&#160;This function is not supported on all devices. Refer to Supported Functions by Device for more information about supported devices.
        /// 
        /// </summary>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int ConfigureSoftwareEdgeSequenceAdvanceTrigger()
        {
            int pInvokeResult = PInvoke.ConfigureSoftwareEdgeSequenceAdvanceTrigger(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_DisableSequenceAdvanceTrigger
        /// 
        /// 
        ///     ViStatus niDCPower_DisableSequenceAdvanceTrigger(ViSession vi);
        /// 
        ///  Purpose
        /// 
        /// Disables the Sequence Advance trigger. The device does not wait for a Sequence Advance trigger before advancing to the next iteration of the sequence. Refer to the Sequence Source Mode topic for more information about the Sequence Advance trigger.
        /// 
        /// 
        /// Note&#160;&#160;This function is not supported on all devices. Refer to Supported Functions by Device for more information about supported devices.
        /// 
        /// </summary>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int DisableSequenceAdvanceTrigger()
        {
            int pInvokeResult = PInvoke.DisableSequenceAdvanceTrigger(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_ExportSignal
        /// 
        /// 
        ///  ViStatus niDCPower_ExportSignal(ViSession vi,
        ///       ViInt32 signal,
        ///       ViConstString signalIdentifier,
        ///       ViConstString outputTerminal);
        /// 
        ///  Purpose
        /// 
        /// Routes signals (triggers and events) to the output terminal you specify. The route is created when the session is committed.
        /// 
        /// 
        /// 
        /// Note&#160;&#160;This function is not supported on all devices. Refer to Supported Functions by Device for more information about supported devices.
        /// 
        /// 
        /// </summary>
        /// <param name="Signal">
        /// 
        /// 
        ///  signal
        /// ViInt32
        ///  Specifies which trigger or event to export.
        /// 
        /// 
        /// 
        /// Defined Values:
        /// 
        /// NIDCPOWER_VAL_SOURCE_COMPLETE_EVENT                (1030)
        /// Exports the Source Complete event.
        /// NIDCPOWER_VAL_MEASURE_COMPLETE_EVENT               (1031)
        /// Exports the Measure Complete event.
        /// NIDCPOWER_VAL_SEQUENCE_ITERATION_COMPLETE_EVENT (1032)
        /// Exports the Sequence Iteration Complete event.
        /// NIDCPOWER_VAL_SEQUENCE_ENGINE_DONE_EVENT           (1033)
        /// Exports the Sequence Engine Done event.
        /// NIDCPOWER_VAL_START_TRIGGER                       (1034)
        /// Exports the Start trigger.
        /// NIDCPOWER_VAL_SOURCE_TRIGGER                      (1035)
        /// Exports the Source trigger.
        /// NIDCPOWER_VAL_MEASURE_TRIGGER                      (1036)
        /// Exports the Measure trigger.
        /// NIDCPOWER_VAL_SEQUENCE_ADVANCE_TRIGGER            (1037)
        /// Exports the Sequence Advance trigger.
        /// 
        /// 
        ///  
        /// </param>
        /// <param name="Signal_Identifier">
        /// 
        /// 
        /// signalIdentifier
        /// ViConstString
        /// Reserved for future use. Pass in an empty string for this parameter.
        ///  
        /// </param>
        /// <param name="Output_Terminal">
        /// 
        /// 
        /// outputTerminal
        /// ViConstString 
        /// Specifies where to export the selected signal. 
        /// 
        /// 
        /// Relative Terminals:
        /// 
        ///                            &quot;&quot;
        ///                Do not export signal
        ///             
        ///                                        &quot;PXI_Trig0&quot;
        ///                PXI trigger line 0
        ///             
        ///                                        &quot;PXI_Trig1&quot;
        ///                PXI trigger line 1
        ///             
        ///                                        &quot;PXI_Trig2&quot;
        ///                PXI trigger line 2
        ///             
        ///                                        &quot;PXI_Trig3&quot;
        ///                PXI trigger line 3
        ///             
        ///                                        &quot;PXI_Trig4&quot;
        ///                PXI trigger line 4
        ///             
        ///                                        &quot;PXI_Trig5&quot;
        ///                PXI trigger line 5
        ///             
        ///                                        &quot;PXI_Trig6&quot;
        ///                PXI trigger line 6
        ///             
        ///                                        &quot;PXI_Trig7&quot;
        ///                PXI trigger line 7
        ///             
        ///          
        /// 
        ///  
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int ExportSignal(int Signal, string Signal_Identifier, string Output_Terminal)
        {
            int pInvokeResult = PInvoke.ExportSignal(this._handle, Signal, Signal_Identifier, Output_Terminal);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_SendSoftwareEdgeTrigger
        /// 
        /// 
        ///  ViStatus niDCPower_SendSoftwareEdgeTrigger(ViSession vi,
        ///       ViInt32 trigger);
        /// 
        ///  Purpose
        /// 
        /// Asserts the specified trigger. This function can override an external edge trigger.
        ///    
        /// 
        /// Note&#160;&#160;This function is not supported on all devices. Refer to Supported Functions by Device for more information about supported devices.
        /// 
        /// 
        /// 
        /// </summary>
        /// <param name="Trigger">
        /// 
        /// 
        /// trigger
        /// ViInt32
        /// Specifies which trigger to assert.
        /// 
        /// 
        /// 
        /// Defined Values:
        /// 
        /// NIDCPOWER_VAL_START_TRIGGER                       (1034)
        /// Asserts the Start trigger.
        /// NIDCPOWER_VAL_SOURCE_TRIGGER                      (1035)
        /// Asserts the Source trigger.
        /// NIDCPOWER_VAL_MEASURE_TRIGGER                      (1036)
        /// Asserts the Measure trigger.
        /// NIDCPOWER_VAL_SEQUENCE_ADVANCE_TRIGGER            (1037)
        /// Asserts the Sequence Advance trigger.
        /// 
        /// 
        ///  
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int SendSoftwareEdgeTrigger(int Trigger)
        {
            int pInvokeResult = PInvoke.SendSoftwareEdgeTrigger(this._handle, Trigger);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_WaitForEvent
        /// 
        /// 
        ///  ViStatus niDCPower_WaitForEvent(ViSession vi,
        ///       ViInt32 eventId,
        ///       ViReal64 timeout);
        /// 
        ///  Purpose
        /// 
        /// Waits until the device has generated the specified event.
        /// 
        /// The session monitors whether each type of event has occurred at least once since the last time this function or the niDCPower_Initiate function were called. If an event has only been generated once and you call this function successively, the function times out. Individual events must be generated between separate calls of this function.
        /// 
        /// 
        /// Note&#160;&#160;This function should only be called in the Running state. Refer to the Programming States Diagram for more information.
        /// 
        /// 
        /// Note&#160;&#160;Refer to Supported Functions by Device for more information about supported devices.
        /// 
        /// </summary>
        /// <param name="Event_ID">
        /// 
        /// 
        /// eventId
        /// ViInt32
        /// Specifies which event to wait for.
        /// 
        /// 
        /// 
        /// 
        /// Defined Values:
        /// 
        /// NIDCPOWER_VAL_SOURCE_COMPLETE_EVENT                (1030)
        /// Waits for the Source Complete event.
        /// NIDCPOWER_VAL_MEASURE_COMPLETE_EVENT               (1031)
        /// Waits for the Measure Complete event.
        /// NIDCPOWER_VAL_SEQUENCE_ITERATION_COMPLETE_EVENT (1032)
        /// Waits for the Sequence Iteration Complete event.
        /// NIDCPOWER_VAL_SEQUENCE_ENGINE_DONE_EVENT           (1033)
        /// Waits for the Sequence Engine Done event.
        /// 
        /// 
        /// 
        ///  
        /// </param>
        /// <param name="Timeout">
        /// 
        /// 
        /// timeout
        /// ViReal64
        /// Specifies the maximum time allowed for this function to complete, in seconds. If the function does not complete within this time interval, NI-DCPower returns an error.
        /// 
        /// 
        /// 
        /// 
        /// Note&#160;&#160;When setting the timeout interval, ensure you take into account any triggers so that the timeout interval is long enough for your application.
        ///  
        /// 
        /// 
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int WaitForEvent(int Event_ID, double Timeout)
        {
            int pInvokeResult = PInvoke.WaitForEvent(this._handle, Event_ID, Timeout);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_QueryMaxVoltageLevel
        /// 
        /// 
        ///  ViStatus niDCPower_QueryMaxVoltageLevel(ViSession vi,
        ///                                                ViConstString channelName,
        ///                                                ViReal64 currentLimit,
        ///                                                ViReal64 *maxVoltageLevel);
        ///  Purpose
        /// Queries the maximum voltage level on an output channel if the output channel is set to the specified currentLimit.
        /// 
        /// </summary>
        /// <param name="Channel_Name">
        /// 
        ///  channelName
        /// ViConstString
        /// Specifies the output channel to query.  The maximum voltage level may only be queried for one channel at a time.
        /// 
        /// </param>
        /// <param name="Current_Limit">
        /// 
        ///  currentLimit
        /// ViReal64
        /// Specifies the current limit to use when calculating the maxVoltageLevel.
        /// 
        /// </param>
        /// <param name="Max_Voltage_Level">
        /// 
        ///  maxVoltageLevel
        /// ViReal64*
        /// Returns the maximum voltage level that can be set on an output channel with the specified
        ///           currentLimit.
        /// 
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int QueryMaxVoltageLevel(string Channel_Name, double Current_Limit, out double Max_Voltage_Level)
        {
            int pInvokeResult = PInvoke.QueryMaxVoltageLevel(this._handle, Channel_Name, Current_Limit, out Max_Voltage_Level);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_QueryMinCurrentLimit
        /// 
        /// 
        ///  ViStatus niDCPower_QueryMinCurrentLimit(ViSession vi,
        ///                                                ViConstString channelName,
        ///                                                ViReal64 voltageLevel,
        ///                                                ViReal64 *minCurrentLimit);
        ///  Purpose
        /// Queries the minimum current limit on an output channel if the output channel is set to the specified voltageLevel.
        /// 
        /// </summary>
        /// <param name="Channel_Name">
        /// 
        ///  channelName
        /// ViConstString
        /// Specifies the output channel to query. The minimum current limit may only be queried for one channel at a time.
        /// 
        /// </param>
        /// <param name="Voltage_Level">
        /// 
        ///  voltageLevel
        /// ViReal64
        /// Specifies the voltage level to use when calculating the minCurrentLimit.
        /// 
        /// </param>
        /// <param name="Min_Current_Limit">
        /// 
        ///  minCurrentLimit
        /// ViReal64*
        /// Returns the minimum current limit that can be set on an output channel with the specified voltageLevel.
        /// 
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int QueryMinCurrentLimit(string Channel_Name, double Voltage_Level, out double Min_Current_Limit)
        {
            int pInvokeResult = PInvoke.QueryMinCurrentLimit(this._handle, Channel_Name, Voltage_Level, out Min_Current_Limit);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_QueryMaxCurrentLimit
        /// 
        /// 
        ///  ViStatus niDCPower_QueryMaxCurrentLimit(ViSession vi,
        ///                                                ViConstString channelName,
        ///                                                ViReal64 voltageLevel,
        ///                                                ViReal64 *maxCurrentLimit);
        ///  Purpose
        /// Queries the maximum current limit on an output channel if the output channel is set to the specified voltageLevel.
        /// 
        /// </summary>
        /// <param name="Channel_Name">
        /// 
        ///  channelName
        /// ViConstString
        /// Specifies the output channel to query.  The maximum current limit may only be queried for one channel at a time.
        /// 
        /// </param>
        /// <param name="Voltage_Level">
        /// 
        ///  voltageLevel
        /// ViReal64
        /// Specifies the voltage level to use when calculating the maxCurrentLimit.
        /// 
        /// </param>
        /// <param name="Max_Current_Limit">
        /// 
        ///  maxCurrentLimit
        /// ViReal64*
        /// Returns the maximum current limit that can be set with the specified
        ///           voltageLevel.
        /// 
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int QueryMaxCurrentLimit(string Channel_Name, double Voltage_Level, out double Max_Current_Limit)
        {
            int pInvokeResult = PInvoke.QueryMaxCurrentLimit(this._handle, Channel_Name, Voltage_Level, out Max_Current_Limit);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_CalSelfCalibrate
        /// 
        ///  ViStatus niDCPower_CalSelfCalibrate(ViSession vi, ViConstString channelName);
        /// 
        /// Purpose
        /// Performs a self-calibration upon the specified channel(s).
        /// 
        /// This function disables the output, performs several internal calculations, and updates calibration values. The updated calibration values are written to the device hardware if the NIDCPOWER_ATTR_SELF_CALIBRATION_PERSISTENCE attribute is set to NIDCPOWER_VAL_WRITE_TO_EEPROM. Refer to the NIDCPOWER_ATTR_SELF_CALIBRATION_PERSISTENCE attribute topic for more information about the settings for this attribute.
        /// 
        /// 
        /// Note&#160;&#160;This function calls the niDCPower_reset function, which puts the device configuration into the default state without changing the NIDCPOWER_ATTR_SELF_CALIBRATION_PERSISTENCE
        ///  attribute.
        /// 
        /// 
        /// Note&#160;&#160;This function is not supported on all devices. Refer to Supported Functions by Device for more information about supported devices.
        /// 
        /// Refer to the Self-Calibration topic for more information about this function.
        /// 
        /// </summary>
        /// <param name="Channel_Name">
        /// 
        /// 
        /// channelName
        /// ViConstString
        /// Specifies to which output channel(s) to apply this configuration value. Specify multiple channels by using a channel list or a channel range. A channel list is a comma (,) separated sequence of channel names (for example, 0,2 specifies channels 0 and 2). A channel range is a lower bound channel followed by a hyphen (-) or colon (:) followed by an upper bound channel (for example, 0-2 specifies channels 0, 1, and 2). In the Running state, multiple output channel configurations are performed sequentially based on the order specified in this parameter. If there is only one channel in the session, you do not need to specify the channel name.
        ///  
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int CalSelfCalibrate(string Channel_Name)
        {
            int pInvokeResult = PInvoke.CalSelfCalibrate(this._handle, Channel_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_CloseExtCal
        /// 
        /// 
        ///  ViStatus niDCPower_CloseExtCal(ViSession vi,
        ///                                       ViInt32 action);
        ///  Purpose
        /// Closes the session specified in vi and deallocates
        ///       the resources that NI-DCPower reserved for calibration. Refer to the calibration
        ///       procedure for the device you are calibrating for detailed instructions on the
        ///       appropriate use of this function.
        /// 
        /// </summary>
        /// <param name="Action">
        /// 
        /// 
        ///  action
        /// ViInt32
        /// Specifies how to use the calibration values from this session as the session is closed. 
        /// Defined Values:
        ///           NIDCPOWER_VAL_COMMIT (1002)The new calibration constants are stored in the EEPROM.
        ///           NIDCPOWER_VAL_CANCEL (1001) The old calibration constants are kept, and the new ones are discarded. 
        /// 
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int CloseExtCal(int Action)
        {
            int pInvokeResult = PInvoke.CloseExtCal(this._handle, Action);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_CalAdjustVoltageLevel
        /// 
        /// 
        ///  ViStatus niDCPower_CalAdjustVoltageLevel(ViSession vi,ViConstString channelName, ViReal64 range,
        ///                                                 ViUInt32 numberOfMeasurements,
        ///                                                 ViReal64 requestedOutputs[],
        ///                                                 ViReal64 measuredOutputs[]);
        ///  Purpose
        /// Calculates the calibration constants for the voltage level for the specified output channel. This function compares the array in
        ///       requestedOutputs to the array in measuredOutputs and calculates the
        ///       calibration constants for the voltage level of the output channel. Refer to the calibration procedure
        ///       of the device you are calibrating for detailed instructions on the
        ///       appropriate use of this function. This function can be called only in an
        ///       external calibration session.
        /// 
        /// 
        /// Note&#160;&#160;This function is not supported on all devices. Refer to Supported Functions by Device for more information about supported devices.
        /// 
        /// </summary>
        /// <param name="Channel_Name">
        /// 
        /// 
        ///  channelName
        /// ViConstString
        /// Specifies the output channel to which these calibration settings apply.
        /// 
        /// </param>
        /// <param name="Range">
        /// 
        /// 
        ///  range
        /// ViReal64
        /// Specifies the range to calibrate with these settings.  Only one channel at a time may be calibrated.
        /// 
        /// </param>
        /// <param name="Number_Of_Measurements">
        /// 
        /// 
        ///  numberOfMeasurements
        /// ViUInt32
        /// Specifies the number of elements in requestedOutputs and measuredOutputs.
        /// 
        /// </param>
        /// <param name="Requested_Outputs">
        /// 
        /// 
        ///  requestedOutputs
        /// ViReal64[]
        /// Specifies an array of the output values requested in the niDCPower_ConfigureVoltageLevel function.
        /// 
        /// </param>
        /// <param name="Measured_Outputs">
        /// 
        /// 
        ///  measuredOutputs
        /// ViReal64[]
        /// Specifies an array of the output values measured by an external precision digital multimeter.
        /// 
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int CalAdjustVoltageLevel(string Channel_Name, double Range, uint Number_Of_Measurements, double[] Requested_Outputs, double[] Measured_Outputs)
        {
            int pInvokeResult = PInvoke.CalAdjustVoltageLevel(this._handle, Channel_Name, Range, Number_Of_Measurements, Requested_Outputs, Measured_Outputs);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_CalAdjustVoltageMeasurement
        /// 
        /// 
        ///  ViStatus niDCPower_CalAdjustVoltageMeasurement(ViSession vi, ViConstString channelName, ViReal64 range,
        ///                     ViUInt32 numberOfMeasurements, ViReal64 reportedOutputs[],
        ///                     ViReal64 measuredOutputs[]);
        ///  Purpose
        /// Calculates the calibration constants for the voltage measurements returned by the niDCPower_Measure
        ///  function for the specified output channel. This function compares the array in reportedOutputs to the array in measuredOutputs
        ///  and calculates the calibration constants for the voltage measurements returned by the niDCPower_Measure function.
        ///  Refer to the calibration procedure for the device you are calibrating for detailed instructions on the appropriate 
        ///  use of this function. This function can only be called in an external calibration session.
        ///  
        /// 
        /// </summary>
        /// <param name="Channel_Name">
        /// 
        /// 
        ///  channelName
        /// ViConstString
        /// Specifies the channel name to which these calibration settings apply.
        /// 
        /// </param>
        /// <param name="Range">
        /// 
        /// 
        ///  range
        /// ViReal64
        /// Specifies the range to calibrate with these settings.  Only one channel at a time may be calibrated.
        /// 
        /// </param>
        /// <param name="Number_Of_Measurements">
        /// 
        /// 
        ///  numberOfMeasurements
        /// ViUInt32
        /// Specifies the number of elements in reportedOutputs and measuredOutputs.
        /// 
        /// </param>
        /// <param name="Reported_Outputs">
        /// 
        /// 
        ///  reportedOutputs
        /// ViReal64[]
        /// Specifies an array of the output values that were returned by the niDCPower_Measure function.
        /// 
        /// </param>
        /// <param name="Measured_Outputs">
        /// 
        /// 
        ///  measuredOutputs
        /// ViReal64[]
        /// Specifies an array of the output values measured by an external precision digital multimeter.
        /// 
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int CalAdjustVoltageMeasurement(string Channel_Name, double Range, uint Number_Of_Measurements, double[] Reported_Outputs, double[] Measured_Outputs)
        {
            int pInvokeResult = PInvoke.CalAdjustVoltageMeasurement(this._handle, Channel_Name, Range, Number_Of_Measurements, Reported_Outputs, Measured_Outputs);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_CalAdjustCurrentLimit
        /// 
        /// 
        ///  ViStatus niDCPower_CalAdjustCurrentLimit(ViSession vi,
        ///                                                 ViConstString channelName,
        ///                                                 ViReal64 range,
        ///                                                 ViUInt32 numberOfMeasurements,
        ///                                                 ViReal64 requestedOutputs[],
        ///                                                 ViReal64 measuredOutputs[]);
        ///  Purpose
        /// Calculates the calibration constants for the current limit for the specified output channel and range. This function compares the array in requestedOutputs 
        /// to the array in measuredOutputs and calculates the calibration constants for the current limit returned by the device. Refer to the calibration procedure for the device you are calibrating for detailed instructions on the appropriate use of this function. This function can only be called from an external calibration session.
        /// 
        /// 
        /// 
        /// Note&#160;&#160;This function is not supported on all devices. Refer to Supported Functions by Device for more information about supported devices.
        /// 
        /// </summary>
        /// <param name="Channel_Name">
        /// 
        /// 
        ///  channelName
        /// ViConstString
        /// Specifies the channel name to which these calibration settings apply.
        /// 
        /// </param>
        /// <param name="Range">
        /// 
        /// 
        ///  range
        /// ViReal64
        /// Specifies the range to calibrate with these settings.  Only one channel at a time may be calibrated.
        /// 
        /// </param>
        /// <param name="Number_Of_Measurements">
        /// 
        /// 
        ///  numberOfMeasurements
        /// ViUInt32
        /// Specifies the number of elements in requestedOutputs and measuredOutputs.
        /// 
        /// </param>
        /// <param name="Requested_Outputs">
        /// 
        /// 
        ///  requestedOutputs
        /// ViReal64[]
        /// Specifies an array of the output values that were requested in the niDCPower_ConfigureCurrentLimit function.
        /// 
        /// </param>
        /// <param name="Measured_Outputs">
        /// 
        /// 
        ///  measuredOutputs
        /// ViReal64[]
        /// Specifies an array of the output values measured by an external precision digital multimeter.
        /// 
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int CalAdjustCurrentLimit(string Channel_Name, double Range, uint Number_Of_Measurements, double[] Requested_Outputs, double[] Measured_Outputs)
        {
            int pInvokeResult = PInvoke.CalAdjustCurrentLimit(this._handle, Channel_Name, Range, Number_Of_Measurements, Requested_Outputs, Measured_Outputs);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_CalAdjustCurrentMeasurement
        /// 
        /// 
        ///  ViStatus niDCPower_CalAdjustCurrentMeasurement(ViSession vi, ViConstString channelName,
        ///                     ViReal64 range, ViUInt32 numberOfMeasurements,
        ///                     ViReal64 reportedOutputs[], ViReal64 measuredOutputs[]);
        ///  Purpose
        /// Calibrates the current measurements returned by the niDCPower_Measure function for the specified output channel. This function calculates the 
        /// calibration constants for the array in reportedOutputs to the array in measuredOutputs and calculates the calibration constants for the current 
        /// measurements returned by the niDCPower_Measure function. Refer to the calibration procedure for the device you are calibrating for detailed instructions 
        /// about the appropriate use of this function. This function can only be called in an external calibration session.
        /// 
        /// </summary>
        /// <param name="Channel_Name">
        /// 
        /// 
        ///  channelName
        /// ViConstString
        /// Specifies the output channel name to which these calibration settings apply.
        /// 
        /// </param>
        /// <param name="Range">
        /// 
        /// 
        ///  range
        /// ViReal64
        /// Specifies the range to calibrate with these settings.  Only one channel at a time may be calibrated.
        /// 
        /// </param>
        /// <param name="Number_Of_Measurements">
        /// 
        /// 
        ///  numberOfMeasurements
        /// ViUInt32
        /// Specifies the number of elements in reportedOutputs and measuredOutputs.
        /// 
        /// </param>
        /// <param name="Reported_Outputs">
        /// 
        /// 
        /// reportedOutputs
        /// ViReal64[]
        /// Specifies an array of the output values that were returned by the niDCPower_Measure function.
        /// 
        /// </param>
        /// <param name="Measured_Outputs">
        /// 
        /// 
        /// measuredOutputs
        /// ViReal64[]
        /// Specifies an array of the output values measured by an external precision digital multimeter.
        /// 
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int CalAdjustCurrentMeasurement(string Channel_Name, double Range, uint Number_Of_Measurements, double[] Reported_Outputs, double[] Measured_Outputs)
        {
            int pInvokeResult = PInvoke.CalAdjustCurrentMeasurement(this._handle, Channel_Name, Range, Number_Of_Measurements, Reported_Outputs, Measured_Outputs);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_CalAdjustOutputResistance
        /// 
        /// 
        ///  
        /// 
        ///  ViStatus niDCPower_CalAdjustOutputResistance(ViSession vi,
        ///       ViConstString channelName,
        ///       ViUInt32 numberOfValues,
        ///       ViReal64 requestedOutputs[],
        ///       ViReal64 measuredOutputs[]);
        ///  Purpose
        /// Compares the array in requestedOutputs 
        /// to the array in measuredOutputs and calculates the calibration constants for the output resistance of the specified channel. Refer to the calibration procedure for the device you are calibrating for detailed instructions on the appropriate use of this function. This function can only be called from an external calibration session. 
        /// 
        /// 
        /// </summary>
        /// <param name="Channel_Name">
        /// 
        /// 
        ///  channelName
        /// ViConstString
        /// Specifies the output channel name to which these calibration settings apply. Only one channel at a time can be calibrated.
        /// 
        /// </param>
        /// <param name="Number_Of_Measurements">
        /// 
        /// 
        ///  numberOfValues
        /// ViUInt32
        /// Specifies the number of elements in requestedOutputs and measuredOutputs.
        /// 
        /// </param>
        /// <param name="Requested_Outputs">
        /// 
        /// 
        ///  requestedOutputs
        /// ViReal64[]
        /// Specifies an array of the output values that were requested in the niDCPower_ConfigureOutputResistance function.
        /// 
        /// </param>
        /// <param name="Measured_Outputs">
        /// 
        /// 
        ///  measuredOutputs
        /// ViReal64[]
        /// Specifies an array of the output values measured by an external precision digital multimeter.
        /// 
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int CalAdjustOutputResistance(string Channel_Name, uint Number_Of_Measurements, double[] Requested_Outputs, double[] Measured_Outputs)
        {
            int pInvokeResult = PInvoke.CalAdjustOutputResistance(this._handle, Channel_Name, Number_Of_Measurements, Requested_Outputs, Measured_Outputs);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_CalAdjustResidualVoltageOffset
        /// 
        /// 
        ///  ViStatus niDCPower_CalAdjustResidualVoltageOffset(ViSession vi, ViConstString channelName);
        ///  Purpose
        /// Calculates the calibration constants for the residual voltage offsets for the specified output channel. Residual offsets account for minor offset effects on the device that lie outside of the self-calibration circuitry. These offsets can include multiplexer input offsets and leakage effects from internal switching.
        /// 
        /// This function requires that the output be shorted prior to it being invoked.
        /// 
        /// Refer to the calibration procedure for the device you are calibrating for detailed instructions on the appropriate use of this function. This function can be called only in an external calibration session.
        /// 
        /// 
        /// Note&#160;&#160;This function is not supported on all devices. Refer to Supported Functions by Device for more information about supported devices.
        /// 
        /// 
        /// </summary>
        /// <param name="Channel_Name">
        /// 
        /// 
        /// channelName
        /// ViConstString
        /// Specifies to which output channel(s) to apply this configuration value. Specify multiple channels by using a channel list or a channel range. A channel list is a comma (,) separated sequence of channel names (for example, 0,2 specifies channels 0 and 2). A channel range is a lower bound channel followed by a hyphen (-) or colon (:) followed by an upper bound channel (for example, 0-2 specifies channels 0, 1, and 2). In the Running state, multiple output channel configurations are performed sequentially based on the order specified in this parameter. If there is only one channel in the session, you do not need to specify the channel name.
        ///  
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int CalAdjustResidualVoltageOffset(string Channel_Name)
        {
            int pInvokeResult = PInvoke.CalAdjustResidualVoltageOffset(this._handle, Channel_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_CalAdjustResidualCurrentOffset
        /// 
        /// 
        ///  ViStatus niDCPower_CalAdjustResidualCurrentOffset(ViSession vi, ViConstString channelName);
        /// Purpose
        /// Calculates the calibration constants for the residual current offsets for the specified output channel. Residual offsets account for minor offset effects on the device that lie outside of the self-calibration circuitry. These offsets can include multiplexer input offsets and leakage effects from internal switching.
        /// 
        /// This function requires that the output be open prior to it being invoked.
        /// 
        /// Refer to the calibration procedure for the device you are calibrating for detailed instructions on the appropriate use of this function. This function can be called only in an external calibration session.
        /// 
        /// 
        /// Note&#160;&#160;This function is not supported on all devices. Refer to Supported Functions by Device for more information about supported devices.
        /// 
        /// 
        /// </summary>
        /// <param name="Channel_Name">
        /// 
        /// 
        /// channelName
        /// ViConstString
        /// Specifies to which output channel(s) to apply this configuration value. Specify multiple channels by using a channel list or a channel range. A channel list is a comma (,) separated sequence of channel names (for example, 0,2 specifies channels 0 and 2). A channel range is a lower bound channel followed by a hyphen (-) or colon (:) followed by an upper bound channel (for example, 0-2 specifies channels 0, 1, and 2). In the Running state, multiple output channel configurations are performed sequentially based on the order specified in this parameter. If there is only one channel in the session, you do not need to specify the channel name.
        ///  
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int CalAdjustResidualCurrentOffset(string Channel_Name)
        {
            int pInvokeResult = PInvoke.CalAdjustResidualCurrentOffset(this._handle, Channel_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_ChangeExtCalPassword
        /// 
        /// 
        ///  ViStatus niDCPower_ChangeExtCalPassword(ViSession vi,
        ///                                                ViConstString oldPassword,
        ///                                                ViConstString newPassword);
        ///  Purpose
        /// Changes the password that is required to initialize an external calibration session. The password can be a maximum of four alphanumeric characters. If you call this function in a session, password is changed immediately. If you call this function in an external calibration session, password is changed only after you close the session using the niDCPower_CloseExtCal function with action set to NIDCPOWER_VAL_COMMIT.
        /// 
        /// </summary>
        /// <param name="Old_Password">
        /// 
        /// 
        ///  oldPassword
        /// ViConstString
        /// Specifies the previous password used to protect the calibration values.
        /// 
        /// </param>
        /// <param name="New_Password">
        /// 
        /// 
        ///  newPassword
        /// ViConstString
        /// Specifies the new password to use to protect the calibration values.
        /// 
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int ChangeExtCalPassword(string Old_Password, string New_Password)
        {
            int pInvokeResult = PInvoke.ChangeExtCalPassword(this._handle, Old_Password, New_Password);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_GetExtCalRecommendedInterval
        /// 
        /// 
        ///  ViStatus niDCPower_GetExtCalRecommendedInterval(ViSession vi, ViInt32 *months);
        ///  Purpose
        /// Returns the recommended maximum interval, in months, between external calibrations.
        /// 
        /// </summary>
        /// <param name="Months">
        /// 
        /// 
        ///  months
        /// ViInt32*
        /// Specifies the recommended maximum interval, in months, between external calibrations.
        /// 
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int GetExtCalRecommendedInterval(out int Months)
        {
            int pInvokeResult = PInvoke.GetExtCalRecommendedInterval(this._handle, out Months);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_GetExtCalLastDateAndTime
        /// 
        /// 
        ///  ViStatus niDCPower_GetExtCalLastDateAndTime(ViSession vi,
        ///                                                    ViInt32 *year,
        ///                                                    ViInt32 *month,
        ///                                                    ViInt32 *day,
        ///                                                    ViInt32 *hour,
        ///                                                    ViInt32 *minute);
        ///  Purpose
        /// Returns the date and time of the last successful calibration. The time returned is 24-hour (military) local time; for example, if the device was calibrated at 2:30 PM, this function returns 14 for hours and 30 for minutes.
        /// 
        /// </summary>
        /// <param name="Year">
        /// 
        /// 
        ///  year
        /// ViInt32*
        /// Returns the year the device was last calibrated.
        /// 
        /// </param>
        /// <param name="Month">
        /// 
        /// 
        ///  month
        /// ViInt32*
        /// Returns the month in which the device was last calibrated.
        /// 
        /// </param>
        /// <param name="Day">
        /// 
        /// 
        ///  day
        /// ViInt32*
        /// Returns the day on which the device was last calibrated.
        /// 
        /// </param>
        /// <param name="Hour">
        /// 
        /// 
        ///  hour
        /// ViInt32*
        /// Returns the hour (in 24-hour time) in which the device was last calibrated.
        /// 
        /// </param>
        /// <param name="Minute">
        /// 
        /// 
        ///  minute
        /// ViInt32*
        /// Returns the minute in which the device was last calibrated.
        /// 
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int GetExtCalLastDateAndTime(out int Year, out int Month, out int Day, out int Hour, out int Minute)
        {
            int pInvokeResult = PInvoke.GetExtCalLastDateAndTime(this._handle, out Year, out Month, out Day, out Hour, out Minute);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_GetSelfCalLastDateAndTime
        /// 
        /// 
        ///  ViStatus niDCPower_GetSelfCalLastDateAndTime(ViSession vi,
        ///                                                    ViInt32 *year,
        ///                                                    ViInt32 *month,
        ///                                                    ViInt32 *day,
        ///                                                    ViInt32 *hour,
        ///                                                    ViInt32 *minute);
        ///  Purpose
        /// Returns the date and time of the oldest successful self-calibration from among the channels in the session.
        /// 
        /// The time returned is 24-hour (military) local time; for example, if you have a session using channels 1 and 2, and a self-calibration was performed on channel 1 at 2:30 PM, and a self-calibration was performed on channel 2 at 3:00 PM on the same day, this VI returns 14 for hours and 30 for minutes.
        /// 
        /// 
        /// 
        /// Note&#160;&#160;This function is not supported on all devices. Refer to Supported Functions by Device for more information about supported devices.
        /// 
        /// </summary>
        /// <param name="Year">
        /// 
        /// 
        ///  year
        /// ViInt32*
        /// Returns the year the device was last calibrated.
        /// 
        /// </param>
        /// <param name="Month">
        /// 
        /// 
        ///  month
        /// ViInt32*
        /// Returns the month in which the device was last calibrated.
        /// 
        /// </param>
        /// <param name="Day">
        /// 
        /// 
        ///  day
        /// ViInt32*
        /// Returns the day on which the device was last calibrated.
        /// 
        /// </param>
        /// <param name="Hour">
        /// 
        /// 
        ///  hour
        /// ViInt32*
        /// Returns the hour (in 24-hour time) in which the device was last calibrated.
        /// 
        /// </param>
        /// <param name="Minute">
        /// 
        /// 
        ///  minute
        /// ViInt32*
        /// Returns the minute in which the device was last calibrated.
        /// 
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int GetSelfCalLastDateAndTime(out int Year, out int Month, out int Day, out int Hour, out int Minute)
        {
            int pInvokeResult = PInvoke.GetSelfCalLastDateAndTime(this._handle, out Year, out Month, out Day, out Hour, out Minute);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_GetCalUserDefinedInfoMaxSize
        /// 
        /// 
        ///  ViStatus niDCPower_GetCalUserDefinedInfoMaxSize(ViSession vi, ViInt32*infoSize);
        ///  Purpose
        /// Returns the maximum number of characters that can be used to store user-defined information in the device onboard EEPROM.
        /// 
        /// </summary>
        /// <param name="Info_Size">
        /// 
        /// 
        ///  infoSize
        /// ViInt32*
        /// Returns the number of characters that can be stored in the device onboard EEPROM.
        /// 
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int GetCalUserDefinedInfoMaxSize(out int Info_Size)
        {
            int pInvokeResult = PInvoke.GetCalUserDefinedInfoMaxSize(this._handle, out Info_Size);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_SetCalUserDefinedInfo
        /// 
        /// 
        ///  ViStatus niDCPower_SetCalUserDefinedInfo(ViSession vi,
        ///                                                 ViConstString info);
        ///  Purpose
        /// Stores a user-defined string of characters in the device onboard EEPROM. If the string is longer than the maximum allowable size, it is truncated. This function overwrites any existing user-defined information.If you call this function in a session, info is immediately changed. If you call this function in an external calibration session, info is changed only after you close the session using the niDCPower_CloseExtCal function with action set to NIDCPOWER_VAL_COMMIT.
        /// 
        /// </summary>
        /// <param name="Info">
        /// 
        ///  info
        /// ViConstString
        /// Specifies the string to store in the device onboard EEPROM.
        /// 
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int SetCalUserDefinedInfo(string Info)
        {
            int pInvokeResult = PInvoke.SetCalUserDefinedInfo(this._handle, Info);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_GetCalUserDefinedInfo
        /// 
        /// 
        ///  ViStatus niDCPower_GetCalUserDefinedInfo(ViSession vi,
        ///                                                 ViString info);
        ///  Purpose
        /// Returns the user-defined information in the device onboard EEPROM.
        /// 
        /// </summary>
        /// <param name="Info">
        /// 
        /// 
        ///  info
        /// ViString
        /// Returns the user-defined information stored in the device onboard EEPROM.
        /// 
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int GetCalUserDefinedInfo(System.Text.StringBuilder Info)
        {
            int pInvokeResult = PInvoke.GetCalUserDefinedInfo(this._handle, Info);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_ReadCurrentTemperature
        /// 
        /// 
        ///  ViStatus niDCPower_ReadCurrentTemperature(ViSession vi,
        ///                                                  ViReal64 *temperature);
        ///  Purpose
        /// Returns the current onboard temperature, in degrees Celsius, of the device.
        /// 
        /// </summary>
        /// <param name="Temperature">
        /// 
        ///  temperature
        /// ViReal64*
        /// Returns the onboard temperature, in degrees Celsius, of the device.
        /// 
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int ReadCurrentTemperature(out double Temperature)
        {
            int pInvokeResult = PInvoke.ReadCurrentTemperature(this._handle, out Temperature);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_GetExtCalLastTemp
        /// 
        /// 
        ///  ViStatus niDCPower_GetExtCalLastTemp(ViSession vi,
        ///                                             ViReal64 *temperature);
        ///  Purpose
        /// Returns the onboard temperature of the device, in degrees Celsius, during the last successful external calibration.
        /// 
        /// </summary>
        /// <param name="Temperature">
        /// 
        /// 
        ///  temperature
        /// ViReal64*
        /// Returns the onboard temperature of the device, in degrees Celsius, during the last successful external calibration.
        /// 
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int GetExtCalLastTemp(out double Temperature)
        {
            int pInvokeResult = PInvoke.GetExtCalLastTemp(this._handle, out Temperature);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_GetSelfCalLastTemp
        /// 
        /// 
        ///  ViStatus niDCPower_GetSelfCalLastTemp(ViSession vi,
        ///                                             ViReal64 *temperature);
        ///  Purpose
        /// Returns the onboard temperature of the device, in degrees Celsius, during the oldest successful self-calibration from among the channels in the session.
        /// 
        /// For example, if you have a session using channels 1 and 2, and you perform a self-calibration on channel 1 with a device temperature of 25 degrees Celsius at 2:00, and a self-calibration was performed on channel 2 at 27 degrees Celsius at 3:00 on the same day, this VI returns 25 for the temperature parameter.
        /// 
        /// 
        /// Note&#160;&#160;This function is not supported on all devices. Refer to Supported Functions by Device for more information about supported devices.
        /// 
        /// 
        /// </summary>
        /// <param name="Temperature">
        /// 
        /// 
        ///  temperature
        /// ViReal64*
        /// Returns the onboard temperature of the device, in degrees Celsius, during the oldest successful calibration.
        /// 
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int GetSelfCalLastTemp(out double Temperature)
        {
            int pInvokeResult = PInvoke.GetSelfCalLastTemp(this._handle, out Temperature);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_reset
        /// 
        /// 
        ///  ViStatus niDCPower_reset(ViSession vi);
        ///  Purpose
        /// Resets the device to a known state.  This function disables power generation, resets session attributes to their default values, clears errors such as overtemperature and unexpected loss of auxiliary power, commits the session attributes, and leaves the session in the Uncommitted state. Refer to the Programming States topic for more information about NI-DCPower software states.
        /// 
        /// </summary>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int reset()
        {
            int pInvokeResult = PInvoke.reset(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_ResetDevice
        /// 
        /// 
        ///  ViStatus niDCPower_ResetDevice(ViSession vi);
        ///  Purpose
        /// Resets the device to a known state.  The function disables power generation, resets session attributes to their default values, clears errors such as overtemperature and unexpected loss of auxiliary power, commits the session attributes, and leaves the session in the Uncommitted state. This function also performs a hard reset on the device and driver software. This function has the same functionality as using reset in Measurement &amp; Automation Explorer. Refer to the Programming States topic for more information about NI-DCPower software states.
        /// 
        /// 
        /// This will also open the output relay on devices that have an output relay.
        /// 
        /// 
        /// 
        /// </summary>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int ResetDevice()
        {
            int pInvokeResult = PInvoke.ResetDevice(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_Disable
        /// 
        /// 
        ///  ViStatus niDCPower_Disable(ViSession vi);
        ///  Purpose
        /// This function performs the same actions as the niDCPower_reset function, except that this function also immediately sets the NIDCPOWER_ATTR_OUTPUT_ENABLED attribute to VI_FALSE.
        /// 
        /// This function opens the output relay on devices that have an output relay.  
        /// 
        /// </summary>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int Disable()
        {
            int pInvokeResult = PInvoke.Disable(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_self_test
        /// 
        /// 
        ///  ViStatus niDCPower_self_test(ViSession vi,
        ///                                     ViInt16 *selfTestResult,
        ///                                     ViChar selfTestMessage[]);
        ///  Purpose
        /// Performs the device self-test routine and returns the test result(s). Calling this function implicitly calls the niDCPower_reset function.
        /// 
        /// </summary>
        /// <param name="Self_Test_Result">
        /// 
        ///  selfTestResult
        /// ViInt16*
        /// Returns the value result from the device self-test.
        /// 
        /// 
        /// Self-Test CodeDescription0Self test passed.
        /// 1Self test failed.
        /// 
        /// </param>
        /// <param name="Self_Test_Message">
        /// 
        ///  selfTestMessage
        /// ViChar[]
        /// Returns the self-test result message. The size of this array must be at least 256 bytes.
        /// 
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int self_test(out short Self_Test_Result, System.Text.StringBuilder Self_Test_Message)
        {
            int pInvokeResult = PInvoke.self_test(this._handle, out Self_Test_Result, Self_Test_Message);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_revision_query
        /// 
        /// 
        ///  ViStatus niDCPower_revision_query(ViSession vi,
        ///                                          ViChar instrumentDriverRevision[],
        ///                                          ViChar firmwareRevision[]);
        ///  Purpose
        /// Returns the revision information of NI-DCPower and the device firmware.
        /// 
        /// </summary>
        /// <param name="Instrument_Driver_Revision">
        /// 
        ///  instrumentDriverRevision
        /// ViChar[]
        /// Returns the driver revision information for NI-DCPower.
        /// 
        /// </param>
        /// <param name="Firmware_Revision">
        /// 
        ///  firmwareRevision
        /// ViChar[]
        /// Returns firmware revision information for the device you are using. The size of this array must be at least 256 bytes.
        /// 
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int revision_query(System.Text.StringBuilder Instrument_Driver_Revision, System.Text.StringBuilder Firmware_Revision)
        {
            int pInvokeResult = PInvoke.revision_query(this._handle, Instrument_Driver_Revision, Firmware_Revision);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_ResetWithDefaults
        /// 
        /// 
        ///  ViStatus niDCPower_ResetWithDefaults(ViSession vi);
        ///  Purpose
        /// Resets the device to a known state. This function disables power generation, resets session attributes to their default values, clears errors such as overtemperature and unexpected loss of auxiliary power, commits the session attributes, and leaves the session in the Running state. In addition to exhibiting the behavior of the niDCPower_reset function, this function can assign user-defined default values for configurable attributes from the IVI configuration.
        /// 
        /// </summary>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int ResetWithDefaults()
        {
            int pInvokeResult = PInvoke.ResetWithDefaults(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_GetChannelName
        /// 
        ///   ViStatus niDCPower_GetChannelName(ViSession vi,
        ///                                          ViInt32 index, ViInt32 bufferSize,
        ///                                          ViChar channelName[]);
        ///  Purpose
        /// Retrieves the output channelName that corresponds to the requested index. Use the 
        /// NIDCPOWER_ATTR_CHANNEL_COUNT
        ///  attribute to determine the upper bound of valid values for index.
        /// 
        /// </summary>
        /// <param name="Index">
        /// 
        /// 
        ///  index
        /// ViInt32
        /// Specifies which output channel name to return. The index values begin at 1.
        /// 
        /// 
        /// 
        /// </param>
        /// <param name="Buffer_Size">
        /// 
        /// 
        ///  bufferSize
        /// ViInt32
        /// Specifies the number of bytes in the ViChar array you specify for channelName. If the channelName, including the terminating NUL byte, contains more bytes than you indicate in this attribute, the function copies (buffer size - 1) bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value. For example, if the value is 123456 and the buffer size is 4, the function places 123 into the buffer and returns 7.
        /// 
        /// If you pass 0, you can pass VI_NULL for channelName.
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// 
        /// 
        ///  channelName
        /// ViChar[]
        /// Returns the output channel name that corresponds to index.
        /// 
        /// </param>
        /// <returns>
        /// 
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call niDCPower_error_message. To obtain additional information concerning the error condition, call niDCPower_GetError.
        /// 
        /// </returns>
        public int GetChannelName(int Index, int Buffer_Size, System.Text.StringBuilder Channel_Name)
        {
            int pInvokeResult = PInvoke.GetChannelName(this._handle, Index, Buffer_Size, Channel_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_GetNextCoercionRecord
        /// 
        ///  ViStatus niDCPower_GetNextCoercionRecord(ViSession vi,
        ///                                                 ViInt32 bufferSize,
        ///                                                 ViChar coercionRecord[]);
        ///  Purpose
        /// Returns the coercion information associated with the IVI session and clears the earliest instance in which NI-DCPower coerced a value you specified.
        /// 
        /// </summary>
        /// <param name="Buffer_Size">
        /// 
        /// 
        ///  bufferSize
        /// ViInt32
        /// Specifies the number of bytes in the ViChar array you specify for coercionRecord. If the next coercion record string, including the terminating NUL byte, contains more bytes than you indicate in this attribute, the function copies (buffer size - 1) bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value. For example, if the value is 123456 and the buffer size is 4, the function places 123 into the buffer and returns 7.
        /// 
        /// If you pass 0, you can pass VI_NULL for coercionRecord.
        /// 
        /// </param>
        /// <param name="Coercion_Record">
        /// 
        /// 
        ///  coercionRecord
        /// ViChar[]
        /// Returns the next coercionRecord for the IVI session. If there are no coercionRecords, the function returns an empty string.
        /// 
        /// </param>
        /// <returns>
        /// 
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call niDCPower_error_message. To obtain additional information concerning the error condition, call niDCPower_GetError.
        /// 
        /// </returns>
        public int GetNextCoercionRecord(int Buffer_Size, System.Text.StringBuilder Coercion_Record)
        {
            int pInvokeResult = PInvoke.GetNextCoercionRecord(this._handle, Buffer_Size, Coercion_Record);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_ClearInterchangeWarnings
        /// 
        /// 
        ///  ViStatus niDCPower_ClearInterchangeWarnings(ViSession vi);
        ///  Purpose
        /// Clears the list of current interchange warnings.
        /// 
        /// </summary>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int ClearInterchangeWarnings()
        {
            int pInvokeResult = PInvoke.ClearInterchangeWarnings(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_ResetInterchangeCheck
        /// 
        /// 
        ///  ViStatus niDCPower_ResetInterchangeCheck(ViSession vi);
        ///  Purpose
        /// When developing a complex test system that consists of multiple test
        ///       modules, it is generally a good idea to design the test modules so that
        ///       they can run in any order.  To do so requires ensuring that each test
        ///       module completely configures the state of each instrument it uses.  If a
        ///       particular test module does not completely configure the state of an
        ///       instrument, the state of the instrument depends on the configuration from
        ///       a previously executed test module.  If you execute the test modules in a
        ///       different order, the behavior of the instrument and therefore the entire
        ///       test module is likely to change.  This change in behavior is generally
        ///       instrument specific and represents an interchangeability problem.
        /// 	  You can use this function to test for such cases.  After you call this
        ///       function, the interchangeability checking algorithms in the specific
        ///       driver ignore all previous configuration operations.  By calling this
        ///       function at the beginning of a test module, you can determine whether the
        ///       test module has dependencies on the operation of previously executed test
        ///       modules.This function does not clear the interchangeability warnings from the
        ///       list of previously recorded interchangeability warnings.  If you want to
        ///       guarantee that the niDCPower_GetNextInterchangeWarning function only
        ///       returns those interchangeability warnings that are generated after
        ///       calling this function, you must clear the list of interchangeability
        ///       warnings.  You can clear the interchangeability warnings list by
        ///       repeatedly calling the niDCPower_GetNextInterchangeWarning function until
        ///       no more interchangeability warnings are returned.  If you are not
        ///       interested in the content of those warnings, you can call the
        ///       niDCPower_ClearInterchangeWarnings function.
        /// 
        /// 
        /// Note&#160;&#160;niDCPower_GetNextInterchangeWarning does not mark any attributes for an interchange check.
        /// 
        /// </summary>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int ResetInterchangeCheck()
        {
            int pInvokeResult = PInvoke.ResetInterchangeCheck(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_GetNextInterchangeWarning
        /// 
        /// 
        ///  ViStatus niDCPower_GetNextInterchangeWarning(ViSession vi,
        ///                                                     ViInt32 bufferSize,
        ///                                                     ViChar interchangeWarning[]);
        ///  Purpose
        /// This function returns the interchangeability warning associated with the IVI session. It retrieves and clears the earliest instance in which the class driver recorded an interchangeability warning. Interchangeability warnings indicate that using your application with a different device may cause a different behavior. 
        /// NI-DCPower performs interchangeability checking when the NIDCPOWER_ATTR_INTERCHANGE_CHECK attribute is set to VI_TRUE. This function returns an empty string in warning if no interchangeability warnings remain for the session. In general, NI-DCPower generates interchangeability warnings when an attribute that affects the behavior of the device is in a state that you did not specify.
        /// 
        /// </summary>
        /// <param name="Buffer_Size">
        /// 
        /// 
        ///  bufferSize
        /// ViInt32
        /// Specifies the number of bytes in the ViChar array you specify for interchangeWarning. If the next interchangeability warning string, including the terminating NUL byte, contains more bytes than you indicate in this attribute, the function copies (buffer size - 1) bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value. For example, if the value is 123456 and the buffer size is 4, the function places 123 into the buffer and returns 7. 
        /// 
        /// If you pass 0, you can pass VI_NULL for interchangeWarning.
        /// 
        /// </param>
        /// <param name="Interchange_Warning">
        ///  
        /// 
        ///  interchangeWarning
        /// ViChar[]
        /// Returns the next interchange warning for the IVI session. If there are no interchange warnings, the function returns an empty string.
        /// 
        /// </param>
        /// <returns>
        /// 
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call niDCPower_error_message. To obtain additional information concerning the error condition, call niDCPower_GetError.
        /// 
        /// </returns>
        public int GetNextInterchangeWarning(int Buffer_Size, System.Text.StringBuilder Interchange_Warning)
        {
            int pInvokeResult = PInvoke.GetNextInterchangeWarning(this._handle, Buffer_Size, Interchange_Warning);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// 
        /// 
        /// niDCPower_ConfigureOutputRange (Obsolete)
        /// 
        ///  ViStatus niDCPower_ConfigureOutputRange(ViSession vi,
        ///       ViConstString channelName,
        ///       ViInt32 rangeType,
        ///       ViReal64 range);
        /// 
        ///  Purpose
        /// 
        /// Configures either the voltage level range or the current limit range. If range type is Voltage, the voltage level range is configured. If range type is Current, the current limit range is configured. 
        /// This function does not configure any of the DC Current output function settings. Refer to the niDCPower_ConfigureOutputFunction function for more information.
        /// 
        /// This is a deprecated function. You must use the following functions instead of the niDCPower_ConfigureOutputRange function:
        /// 
        /// niDCPower_ConfigureVoltageLevel
        /// 
        /// niDCPower_ConfigureVoltageLimit
        /// 
        /// niDCPower_ConfigureCurrentLevel
        /// 
        /// niDCPower_ConfigureCurrentLimit
        /// 
        /// </summary>
        /// <param name="Channel_Name">
        /// 
        /// 
        /// channelName
        /// ViConstString
        /// Specifies to which output channel(s) to apply this configuration value. Specify multiple channels by using a channel list or a channel range. A channel list is a comma (,) separated sequence of channel names (for example, 0,2 specifies channels 0 and 2). A channel range is a lower bound channel followed by a hyphen (-) or colon (:) followed by an upper bound channel (for example, 0-2 specifies channels 0, 1, and 2). In the Running state, multiple output channel configurations are performed sequentially based on the order specified in this parameter. If there is only one channel in the session, you do not need to specify the channel name.
        ///  
        /// </param>
        /// <param name="Range_Type">
        /// 
        ///  rangeType
        /// ViInt32
        /// Specifies the type of the range: voltage or current.
        /// 
        /// 
        /// 
        /// Defined Values:
        /// 
        /// NIDCPOWER_VAL_RANGE_CURRENT (0)NI-DCPower configures the current range.
        /// NIDCPOWER_VAL_RANGE_VOLTAGE (1)NI-DCPower configures the voltage range.
        /// 
        /// 
        /// 
        /// </param>
        /// <param name="Range">
        /// 
        /// 
        ///  range
        /// ViReal64
        /// Specifies the range to calibrate with these settings.  Only one channel at a time may be calibrated.
        /// 
        /// </param>
        /// <returns>
        /// 
        ///  StatusViStatusReports the status of this operation. To obtain a text description of the status code, call the niDCPower_error_message function. To obtain additional information concerning the error condition, call the niDCPower_GetError function.
        /// 
        /// </returns>
        public int ConfigureOutputRange(string Channel_Name, int Range_Type, double Range)
        {
            int pInvokeResult = PInvoke.ConfigureOutputRange(this._handle, Channel_Name, Range_Type, Range);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        public void Dispose()
        {
            this.Dispose(true);
            System.GC.SuppressFinalize(this);
        }

        private void Dispose(bool disposing)
        {
            if ((this._disposed == false))
            {
                PInvoke.close(this._handle);
                this._handle = new System.Runtime.InteropServices.HandleRef(null, System.IntPtr.Zero);
            }
            this._disposed = true;
        }

        public int GetInt32(nidcpowerProperties propertyId, string repeatedCapabilityOrChannel)
        {
            int val;
            PInvoke.TestForError(this._handle, PInvoke.GetAttributeViInt32(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), out val));
            return val;
        }

        public int GetInt32(nidcpowerProperties propertyId)
        {
            return this.GetInt32(propertyId, "");
        }

        public double GetDouble(nidcpowerProperties propertyId, string repeatedCapabilityOrChannel)
        {
            double val;
            PInvoke.TestForError(this._handle, PInvoke.GetAttributeViReal64(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), out val));
            return val;
        }

        public double GetDouble(nidcpowerProperties propertyId)
        {
            return this.GetDouble(propertyId, "");
        }

        public string GetString(nidcpowerProperties propertyId, string repeatedCapabilityOrChannel)
        {
            System.Text.StringBuilder newVal = new System.Text.StringBuilder(512);
            int size = PInvoke.GetAttributeViString(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), 512, newVal);
            if ((size < 0))
            {
                PInvoke.ThrowError(this._handle, size);
            }
            else
            {
                if ((size > 0))
                {
                    newVal.Capacity = size;
                    PInvoke.TestForError(this._handle, PInvoke.GetAttributeViString(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), size, newVal));
                }
            }
            return newVal.ToString();
        }

        public string GetString(nidcpowerProperties propertyId)
        {
            return this.GetString(propertyId, "");
        }

        public bool GetBoolean(nidcpowerProperties propertyId, string repeatedCapabilityOrChannel)
        {
            ushort val;
            PInvoke.TestForError(this._handle, PInvoke.GetAttributeViBoolean(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), out val));
            return System.Convert.ToBoolean(val);
        }

        public bool GetBoolean(nidcpowerProperties propertyId)
        {
            return this.GetBoolean(propertyId, "");
        }

        public void SetInt32(nidcpowerProperties propertyId, string repeatedCapabilityOrChannel, int val)
        {
            PInvoke.TestForError(this._handle, PInvoke.SetAttributeViInt32(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), val));
        }

        public void SetInt32(nidcpowerProperties propertyId, int val)
        {
            this.SetInt32(propertyId, "", val);
        }

        public void SetDouble(nidcpowerProperties propertyId, string repeatedCapabilityOrChannel, double val)
        {
            PInvoke.TestForError(this._handle, PInvoke.SetAttributeViReal64(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), val));
        }

        public void SetDouble(nidcpowerProperties propertyId, double val)
        {
            this.SetDouble(propertyId, "", val);
        }

        public void SetString(nidcpowerProperties propertyId, string repeatedCapabilityOrChannel, string val)
        {
            PInvoke.TestForError(this._handle, PInvoke.SetAttributeViString(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), val));
        }

        public void SetString(nidcpowerProperties propertyId, string val)
        {
            this.SetString(propertyId, "", val);
        }

        public void SetBoolean(nidcpowerProperties propertyId, string repeatedCapabilityOrChannel, bool val)
        {
            PInvoke.TestForError(this._handle, PInvoke.SetAttributeViBoolean(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), System.Convert.ToUInt16(val)));
        }

        public void SetBoolean(nidcpowerProperties propertyId, bool val)
        {
            this.SetBoolean(propertyId, "", val);
        }

        private class PInvoke
        {
            private const string DCPowerModuleName = @"C:\Program Files\IVI Foundation\IVI\Bin\nidcpower_64.dll";

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_InitializeWithChannels", CallingConvention = CallingConvention.StdCall)]
            public static extern int InitializeWithChannels(string Resource_Name, string Channels, ushort Reset, string Option_String, out System.IntPtr Instrument_Handle);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_InitExtCal", CallingConvention = CallingConvention.StdCall)]
            public static extern int InitExtCal(string Resource_Name, string Password, out System.IntPtr Instrument_Handle);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_init", CallingConvention = CallingConvention.StdCall)]
            public static extern int init(string Resource_Name, ushort ID_Query, ushort Reset_Device, out System.IntPtr Instrument_Handle);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_InitWithOptions", CallingConvention = CallingConvention.StdCall)]
            public static extern int InitWithOptions(string Resource_Name, ushort ID_Query, ushort Reset_Device, string Option_String, out System.IntPtr Instrument_Handle);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_ConfigureVoltageLevel", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureVoltageLevel(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, double Level);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_ConfigureVoltageLevelRange", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureVoltageLevelRange(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, double Range);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_ConfigureCurrentLimit", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureCurrentLimit(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, int Behavior, double Limit);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_ConfigureCurrentLimitRange", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureCurrentLimitRange(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, double Range);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_ConfigureOutputResistance", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureOutputResistance(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, double Resistance);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_ConfigureCurrentLevel", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureCurrentLevel(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, double Level);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_ConfigureCurrentLevelRange", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureCurrentLevelRange(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, double Range);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_ConfigureVoltageLimit", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureVoltageLimit(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, double Limit);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_ConfigureVoltageLimitRange", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureVoltageLimitRange(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, double Range);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_ConfigureSourceMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureSourceMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Source_Mode);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_ConfigureOutputFunction", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureOutputFunction(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, int Function);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_SetSequence", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSequence(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, double[] Values, double[] Source_Delays, uint Size);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_ConfigureOutputEnabled", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureOutputEnabled(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, ushort Enabled);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_ConfigureApertureTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureApertureTime(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, double Aperture_Time, int Units);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_ConfigureAutoZero", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureAutoZero(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, int Auto_Zero);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_ConfigurePowerLineFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigurePowerLineFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Powerline_Frequency);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_ConfigureSense", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureSense(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, int Sense);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_Measure", CallingConvention = CallingConvention.StdCall)]
            public static extern int Measure(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, int Measurement_Type, out double Measurement);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_MeasureMultiple", CallingConvention = CallingConvention.StdCall)]
            public static extern int MeasureMultiple(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, [In, Out] double[] Voltage_Measurements, [In, Out] double[] Current_Measurements);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_FetchMultiple", CallingConvention = CallingConvention.StdCall)]
            public static extern int FetchMultiple(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, double Timeout, int Count, [In, Out] double[] Voltage_Measurements, [In, Out] double[] Current_Measurements, [In, Out] ushort[] In_Compliance, out int Actual_Count);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_QueryInCompliance", CallingConvention = CallingConvention.StdCall)]
            public static extern int QueryInCompliance(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, out ushort In_Compliance);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_QueryOutputState", CallingConvention = CallingConvention.StdCall)]
            public static extern int QueryOutputState(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, int Output_State, out ushort In_State);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_Commit", CallingConvention = CallingConvention.StdCall)]
            public static extern int Commit(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_Initiate", CallingConvention = CallingConvention.StdCall)]
            public static extern int Initiate(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_Abort", CallingConvention = CallingConvention.StdCall)]
            public static extern int Abort(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_ConfigureDigitalEdgeStartTrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureDigitalEdgeStartTrigger(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Input_Terminal, int Edge);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_ConfigureSoftwareEdgeStartTrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureSoftwareEdgeStartTrigger(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_DisableStartTrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int DisableStartTrigger(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_ConfigureDigitalEdgeSourceTrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureDigitalEdgeSourceTrigger(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Input_Terminal, int Edge);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_ConfigureSoftwareEdgeSourceTrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureSoftwareEdgeSourceTrigger(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_DisableSourceTrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int DisableSourceTrigger(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_ConfigureDigitalEdgeMeasureTrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureDigitalEdgeMeasureTrigger(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Input_Terminal, int Edge);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_ConfigureSoftwareEdgeMeasureTrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureSoftwareEdgeMeasureTrigger(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_ConfigureDigitalEdgeSequenceAdvanceTrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureDigitalEdgeSequenceAdvanceTrigger(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Input_Terminal, int Edge);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_ConfigureSoftwareEdgeSequenceAdvanceTrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureSoftwareEdgeSequenceAdvanceTrigger(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_DisableSequenceAdvanceTrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int DisableSequenceAdvanceTrigger(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_ExportSignal", CallingConvention = CallingConvention.StdCall)]
            public static extern int ExportSignal(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Signal, string Signal_Identifier, string Output_Terminal);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_SendSoftwareEdgeTrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int SendSoftwareEdgeTrigger(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trigger);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_WaitForEvent", CallingConvention = CallingConvention.StdCall)]
            public static extern int WaitForEvent(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Event_ID, double Timeout);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_QueryMaxVoltageLevel", CallingConvention = CallingConvention.StdCall)]
            public static extern int QueryMaxVoltageLevel(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, double Current_Limit, out double Max_Voltage_Level);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_QueryMinCurrentLimit", CallingConvention = CallingConvention.StdCall)]
            public static extern int QueryMinCurrentLimit(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, double Voltage_Level, out double Min_Current_Limit);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_QueryMaxCurrentLimit", CallingConvention = CallingConvention.StdCall)]
            public static extern int QueryMaxCurrentLimit(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, double Voltage_Level, out double Max_Current_Limit);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_CalSelfCalibrate", CallingConvention = CallingConvention.StdCall)]
            public static extern int CalSelfCalibrate(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_CloseExtCal", CallingConvention = CallingConvention.StdCall)]
            public static extern int CloseExtCal(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Action);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_CalAdjustVoltageLevel", CallingConvention = CallingConvention.StdCall)]
            public static extern int CalAdjustVoltageLevel(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, double Range, uint Number_Of_Measurements, double[] Requested_Outputs, double[] Measured_Outputs);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_CalAdjustVoltageMeasurement", CallingConvention = CallingConvention.StdCall)]
            public static extern int CalAdjustVoltageMeasurement(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, double Range, uint Number_Of_Measurements, double[] Reported_Outputs, double[] Measured_Outputs);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_CalAdjustCurrentLimit", CallingConvention = CallingConvention.StdCall)]
            public static extern int CalAdjustCurrentLimit(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, double Range, uint Number_Of_Measurements, double[] Requested_Outputs, double[] Measured_Outputs);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_CalAdjustCurrentMeasurement", CallingConvention = CallingConvention.StdCall)]
            public static extern int CalAdjustCurrentMeasurement(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, double Range, uint Number_Of_Measurements, double[] Reported_Outputs, double[] Measured_Outputs);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_CalAdjustOutputResistance", CallingConvention = CallingConvention.StdCall)]
            public static extern int CalAdjustOutputResistance(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, uint Number_Of_Measurements, double[] Requested_Outputs, double[] Measured_Outputs);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_CalAdjustResidualVoltageOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int CalAdjustResidualVoltageOffset(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_CalAdjustResidualCurrentOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int CalAdjustResidualCurrentOffset(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_ChangeExtCalPassword", CallingConvention = CallingConvention.StdCall)]
            public static extern int ChangeExtCalPassword(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Old_Password, string New_Password);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_GetExtCalRecommendedInterval", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetExtCalRecommendedInterval(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Months);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_GetExtCalLastDateAndTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetExtCalLastDateAndTime(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Year, out int Month, out int Day, out int Hour, out int Minute);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_GetSelfCalLastDateAndTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSelfCalLastDateAndTime(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Year, out int Month, out int Day, out int Hour, out int Minute);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_GetCalUserDefinedInfoMaxSize", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCalUserDefinedInfoMaxSize(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Info_Size);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_SetCalUserDefinedInfo", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetCalUserDefinedInfo(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Info);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_GetCalUserDefinedInfo", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCalUserDefinedInfo(System.Runtime.InteropServices.HandleRef Instrument_Handle, System.Text.StringBuilder Info);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_ReadCurrentTemperature", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadCurrentTemperature(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Temperature);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_GetExtCalLastTemp", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetExtCalLastTemp(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Temperature);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_GetSelfCalLastTemp", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSelfCalLastTemp(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Temperature);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_reset", CallingConvention = CallingConvention.StdCall)]
            public static extern int reset(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_ResetDevice", CallingConvention = CallingConvention.StdCall)]
            public static extern int ResetDevice(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_Disable", CallingConvention = CallingConvention.StdCall)]
            public static extern int Disable(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_self_test", CallingConvention = CallingConvention.StdCall)]
            public static extern int self_test(System.Runtime.InteropServices.HandleRef Instrument_Handle, out short Self_Test_Result, System.Text.StringBuilder Self_Test_Message);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_revision_query", CallingConvention = CallingConvention.StdCall)]
            public static extern int revision_query(System.Runtime.InteropServices.HandleRef Instrument_Handle, System.Text.StringBuilder Instrument_Driver_Revision, System.Text.StringBuilder Firmware_Revision);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_ResetWithDefaults", CallingConvention = CallingConvention.StdCall)]
            public static extern int ResetWithDefaults(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_GetChannelName", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetChannelName(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Index, int Buffer_Size, System.Text.StringBuilder Channel_Name);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_GetNextCoercionRecord", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetNextCoercionRecord(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Buffer_Size, System.Text.StringBuilder Coercion_Record);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_ClearInterchangeWarnings", CallingConvention = CallingConvention.StdCall)]
            public static extern int ClearInterchangeWarnings(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_ResetInterchangeCheck", CallingConvention = CallingConvention.StdCall)]
            public static extern int ResetInterchangeCheck(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_GetNextInterchangeWarning", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetNextInterchangeWarning(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Buffer_Size, System.Text.StringBuilder Interchange_Warning);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_ConfigureOutputRange", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureOutputRange(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, int Range_Type, double Range);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_close", CallingConvention = CallingConvention.StdCall)]
            public static extern int close(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_error_message", CallingConvention = CallingConvention.StdCall)]
            public static extern int error_message(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Error_Code, System.Text.StringBuilder Error_Message_2);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_GetAttributeViInt32", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAttributeViInt32(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, int Attribute_ID, out int Attribute_Value);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_GetAttributeViReal64", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAttributeViReal64(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, int Attribute_ID, out double Attribute_Value);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_GetAttributeViString", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAttributeViString(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, int Attribute_ID, int Buffer_Size, System.Text.StringBuilder Attribute_Value);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_GetAttributeViBoolean", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAttributeViBoolean(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, int Attribute_ID, out ushort Attribute_Value);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_GetAttributeViSession", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAttributeViSession(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, int Attribute_ID, out System.Runtime.InteropServices.HandleRef Attribute_Value);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_SetAttributeViInt32", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAttributeViInt32(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, int Attribute_ID, int Attribute_Value);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_SetAttributeViReal64", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAttributeViReal64(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, int Attribute_ID, double Attribute_Value);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_SetAttributeViString", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAttributeViString(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, int Attribute_ID, string Attribute_Value);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_SetAttributeViBoolean", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAttributeViBoolean(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, int Attribute_ID, ushort Attribute_Value);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_SetAttributeViSession", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAttributeViSession(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, int Attribute_ID, System.Runtime.InteropServices.HandleRef Attribute_Value);

            [DllImport(DCPowerModuleName, EntryPoint = "niDCPower_GetError", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetError(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Code, int BufferSize, System.Text.StringBuilder Description);


            public static int TestForError(System.Runtime.InteropServices.HandleRef handle, int status)
            {
                if ((status < 0))
                {
                    PInvoke.ThrowError(handle, status);
                }
                return status;
            }

            public static int ThrowError(System.Runtime.InteropServices.HandleRef handle, int code)
            {
                int status;
                int size = PInvoke.GetError(handle, out status, 0, null);
                System.Text.StringBuilder msg = new System.Text.StringBuilder();
                if ((size >= 0))
                {
                    msg.Capacity = size;
                    PInvoke.GetError(handle, out status, size, msg);
                }
                throw new System.Runtime.InteropServices.ExternalException(msg.ToString(), code);
            }
        }
    }

    public class nidcpowerConstants
    {

        public const int CurrentRegulate = 0;

        public const int SinglePoint = 1020;

        public const int Sequence = 1021;

        public const int DcVoltage = 1006;

        public const int DcCurrent = 1007;

        public const int Seconds = 1028;

        public const int PowerLineCycles = 1029;

        public const int Off = 0;

        public const int Once = 1024;

        public const int On = 1;

        public const double _50Hertz = 50;

        public const double _60Hertz = 60;

        public const int Local = 1008;

        public const int Remote = 1009;

        public const int MeasureVoltage = 1;

        public const int MeasureCurrent = 0;

        public const int OutputConstantVoltage = 0;

        public const int OutputConstantCurrent = 1;

        public const int Rising = 1016;

        public const int Falling = 1017;

        public const int SourceCompleteEvent = 1030;

        public const int MeasureCompleteEvent = 1031;

        public const int SequenceIterationCompleteEvent = 1032;

        public const int SequenceEngineDoneEvent = 1033;

        public const int StartTrigger = 1034;

        public const int SourceTrigger = 1035;

        public const int MeasureTrigger = 1036;

        public const int SequenceAdvanceTrigger = 1037;

        public const int Cancel = 1001;

        public const int Commit = 1002;

        public const int RangeVoltage = 1;

        public const int RangeCurrent = 0;

        public const int Normal = 1038;

        public const int Fast = 1039;

        public const int Slow = 1041;

        public const int Custom = 1042;

        public const int Low = 1010;

        public const int High = 1011;

        public const int AutomaticallyAfterSourceComplete = 1025;

        public const int OnDemand = 1026;

        public const int OnMeasureTrigger = 1027;

        public const int DcNoiseRejectionNormal = 1044;

        public const int DcNoiseRejectionSecondOrder = 1043;

        public const int None = 1012;

        public const int DigitalEdge = 1014;

        public const int SoftwareEdge = 1015;

        public const int ActiveHigh = 1018;

        public const int ActiveLow = 1019;

        public const int Internal = 1003;

        public const int Auxiliary = 1004;

        public const int Automatic = 1005;

        public const int KeepInMemory = 1045;

        public const int WriteToEeprom = 1046;
    }

    public enum nidcpowerProperties
    {

        /// <summary>
        /// System.Int32
        /// </summary>
        SourceMode = 1150054,

        /// <summary>
        /// System.Int32
        /// </summary>
        OutputFunction = 1150008,

        /// <summary>
        /// System.Boolean
        /// </summary>
        OutputEnabled = 1250006,

        /// <summary>
        /// System.Boolean
        /// </summary>
        OutputConnected = 1150060,

        /// <summary>
        /// System.Double
        /// </summary>
        OutputResistance = 1150061,

        /// <summary>
        /// System.Int32
        /// </summary>
        TransientResponse = 1150062,

        /// <summary>
        /// System.Double
        /// </summary>
        VoltageGainBandwidth = 1150067,

        /// <summary>
        /// System.Double
        /// </summary>
        VoltageCompensationFrequency = 1150068,

        /// <summary>
        /// System.Double
        /// </summary>
        VoltagePoleZeroRatio = 1150069,

        /// <summary>
        /// System.Double
        /// </summary>
        CurrentGainBandwidth = 1150070,

        /// <summary>
        /// System.Double
        /// </summary>
        CurrentCompensationFrequency = 1150071,

        /// <summary>
        /// System.Double
        /// </summary>
        CurrentPoleZeroRatio = 1150072,

        /// <summary>
        /// System.Double
        /// </summary>
        VoltageLevel = 1250001,

        /// <summary>
        /// System.Double
        /// </summary>
        VoltageLevelRange = 1150005,

        /// <summary>
        /// System.Int32
        /// </summary>
        VoltageLevelAutorange = 1150015,

        /// <summary>
        /// System.Double
        /// </summary>
        CurrentLimit = 1250005,

        /// <summary>
        /// System.Double
        /// </summary>
        CurrentLimitRange = 1150004,

        /// <summary>
        /// System.Int32
        /// </summary>
        CurrentLimitAutorange = 1150016,

        /// <summary>
        /// System.Double
        /// </summary>
        CurrentLevel = 1150009,

        /// <summary>
        /// System.Double
        /// </summary>
        CurrentLevelRange = 1150011,

        /// <summary>
        /// System.Int32
        /// </summary>
        CurrentLevelAutorange = 1150017,

        /// <summary>
        /// System.Double
        /// </summary>
        VoltageLimit = 1150010,

        /// <summary>
        /// System.Double
        /// </summary>
        VoltageLimitRange = 1150012,

        /// <summary>
        /// System.Int32
        /// </summary>
        VoltageLimitAutorange = 1150018,

        /// <summary>
        /// System.Double
        /// </summary>
        SourceDelay = 1150051,

        /// <summary>
        /// System.Boolean
        /// </summary>
        OvpEnabled = 1250002,

        /// <summary>
        /// System.Boolean
        /// </summary>
        OverrangingEnabled = 1150007,

        /// <summary>
        /// System.Int32
        /// </summary>
        OutputCapacitance = 1150014,

        /// <summary>
        /// System.Int32
        /// </summary>
        SequenceLoopCount = 1150025,

        /// <summary>
        /// System.Boolean
        /// </summary>
        SequenceLoopCountIsFinite = 1150078,

        /// <summary>
        /// System.Int32
        /// </summary>
        Sense = 1150013,

        /// <summary>
        /// System.Int32
        /// </summary>
        AutoZero = 1150055,

        /// <summary>
        /// System.Int32
        /// </summary>
        ApertureTimeUnits = 1150059,

        /// <summary>
        /// System.Double
        /// </summary>
        ApertureTime = 1150058,

        /// <summary>
        /// System.Double
        /// </summary>
        PowerLineFrequency = 1150020,

        /// <summary>
        /// System.Int32
        /// </summary>
        SamplesToAverage = 1150003,

        /// <summary>
        /// System.Int32
        /// </summary>
        MeasureRecordLength = 1150063,

        /// <summary>
        /// System.Boolean
        /// </summary>
        MeasureRecordLengthIsFinite = 1150064,

        /// <summary>
        /// System.Double
        /// </summary>
        MeasureRecordDeltaTime = 1150065,

        /// <summary>
        /// System.Int32
        /// </summary>
        FetchBacklog = 1150056,

        /// <summary>
        /// System.Int32
        /// </summary>
        MeasureWhen = 1150057,

        /// <summary>
        /// System.Boolean
        /// </summary>
        ResetAverageBeforeMeasurement = 1150006,

        /// <summary>
        /// System.Int32
        /// </summary>
        DcNoiseRejection = 1150066,

        /// <summary>
        /// System.Int32
        /// </summary>
        MeasureBufferSize = 1150077,

        /// <summary>
        /// System.Int32
        /// </summary>
        StartTriggerType = 1150021,

        /// <summary>
        /// System.String
        /// </summary>
        ExportedStartTriggerOutputTerminal = 1150024,

        /// <summary>
        /// System.Int32
        /// </summary>
        DigitalEdgeStartTriggerEdge = 1150022,

        /// <summary>
        /// System.String
        /// </summary>
        DigitalEdgeStartTriggerInputTerminal = 1150023,

        /// <summary>
        /// System.Int32
        /// </summary>
        SourceTriggerType = 1150030,

        /// <summary>
        /// System.String
        /// </summary>
        ExportedSourceTriggerOutputTerminal = 1150033,

        /// <summary>
        /// System.Int32
        /// </summary>
        DigitalEdgeSourceTriggerEdge = 1150031,

        /// <summary>
        /// System.String
        /// </summary>
        DigitalEdgeSourceTriggerInputTerminal = 1150032,

        /// <summary>
        /// System.Int32
        /// </summary>
        MeasureTriggerType = 1150034,

        /// <summary>
        /// System.String
        /// </summary>
        ExportedMeasureTriggerOutputTerminal = 1150037,

        /// <summary>
        /// System.Int32
        /// </summary>
        DigitalEdgeMeasureTriggerEdge = 1150035,

        /// <summary>
        /// System.String
        /// </summary>
        DigitalEdgeMeasureTriggerInputTerminal = 1150036,

        /// <summary>
        /// System.Int32
        /// </summary>
        SequenceAdvanceTriggerType = 1150026,

        /// <summary>
        /// System.String
        /// </summary>
        ExportedSequenceAdvanceTriggerOutputTerminal = 1150029,

        /// <summary>
        /// System.Int32
        /// </summary>
        DigitalEdgeSequenceAdvanceTriggerEdge = 1150027,

        /// <summary>
        /// System.String
        /// </summary>
        DigitalEdgeSequenceAdvanceTriggerInputTerminal = 1150028,

        /// <summary>
        /// System.String
        /// </summary>
        SourceCompleteEventOutputTerminal = 1150043,

        /// <summary>
        /// System.Int32
        /// </summary>
        SourceCompleteEventPulsePolarity = 1150041,

        /// <summary>
        /// System.Double
        /// </summary>
        SourceCompleteEventPulseWidth = 1150042,

        /// <summary>
        /// System.String
        /// </summary>
        MeasureCompleteEventOutputTerminal = 1150047,

        /// <summary>
        /// System.Double
        /// </summary>
        MeasureCompleteEventDelay = 1150046,

        /// <summary>
        /// System.Int32
        /// </summary>
        MeasureCompleteEventPulsePolarity = 1150044,

        /// <summary>
        /// System.Double
        /// </summary>
        MeasureCompleteEventPulseWidth = 1150045,

        /// <summary>
        /// System.String
        /// </summary>
        SequenceIterationCompleteEventOutputTerminal = 1150040,

        /// <summary>
        /// System.Int32
        /// </summary>
        SequenceIterationCompleteEventPulsePolarity = 1150038,

        /// <summary>
        /// System.Double
        /// </summary>
        SequenceIterationCompleteEventPulseWidth = 1150039,

        /// <summary>
        /// System.String
        /// </summary>
        SequenceEngineDoneEventOutputTerminal = 1150050,

        /// <summary>
        /// System.Int32
        /// </summary>
        SequenceEngineDoneEventPulsePolarity = 1150048,

        /// <summary>
        /// System.Double
        /// </summary>
        SequenceEngineDoneEventPulseWidth = 1150049,

        /// <summary>
        /// System.Int32
        /// </summary>
        PowerSource = 1150000,

        /// <summary>
        /// System.Int32
        /// </summary>
        PowerSourceInUse = 1150001,

        /// <summary>
        /// System.Boolean
        /// </summary>
        AuxiliaryPowerSourceAvailable = 1150002,

        /// <summary>
        /// System.Int32
        /// </summary>
        SelfCalibrationPersistence = 1150073,

        /// <summary>
        /// System.Boolean
        /// </summary>
        RangeCheck = 1050002,

        /// <summary>
        /// System.Boolean
        /// </summary>
        QueryInstrumentStatus = 1050003,

        /// <summary>
        /// System.Boolean
        /// </summary>
        Cache = 1050004,

        /// <summary>
        /// System.Boolean
        /// </summary>
        Simulate = 1050005,

        /// <summary>
        /// System.Boolean
        /// </summary>
        RecordCoercions = 1050006,

        /// <summary>
        /// System.Boolean
        /// </summary>
        InterchangeCheck = 1050021,

        /// <summary>
        /// System.String
        /// </summary>
        SpecificDriverDescription = 1050514,

        /// <summary>
        /// System.String
        /// </summary>
        SpecificDriverPrefix = 1050302,

        /// <summary>
        /// System.String
        /// </summary>
        SpecificDriverVendor = 1050513,

        /// <summary>
        /// System.String
        /// </summary>
        SpecificDriverRevision = 1050551,

        /// <summary>
        /// System.Int32
        /// </summary>
        SpecificDriverClassSpecMajorVersion = 1050515,

        /// <summary>
        /// System.Int32
        /// </summary>
        SpecificDriverClassSpecMinorVersion = 1050516,

        /// <summary>
        /// System.String
        /// </summary>
        SupportedInstrumentModels = 1050327,

        /// <summary>
        /// System.String
        /// </summary>
        GroupCapabilities = 1050401,

        /// <summary>
        /// System.Int32
        /// </summary>
        ChannelCount = 1050203,

        /// <summary>
        /// System.String
        /// </summary>
        InstrumentManufacturer = 1050511,

        /// <summary>
        /// System.String
        /// </summary>
        InstrumentModel = 1050512,

        /// <summary>
        /// System.String
        /// </summary>
        InstrumentFirmwareRevision = 1050510,

        /// <summary>
        /// System.String
        /// </summary>
        DriverSetup = 1050007,

        /// <summary>
        /// System.String
        /// </summary>
        LogicalName = 1050305,

        /// <summary>
        /// System.String
        /// </summary>
        IoResourceDescriptor = 1050304,
    }
}
